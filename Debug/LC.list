
LC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c40  08002c40  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c40  08002c40  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c40  08002c40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  08002cb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002cb8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e02  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f2  00000000  00000000  00029e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018465  00000000  00000000  0002cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c251  00000000  00000000  0004524d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2cf  00000000  00000000  0005149e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec76d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b2c  00000000  00000000  000ec7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002b8c 	.word	0x08002b8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08002b8c 	.word	0x08002b8c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b08b      	sub	sp, #44	; 0x2c
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
 800024c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800024e:	2110      	movs	r1, #16
 8000250:	187b      	adds	r3, r7, r1
 8000252:	223c      	movs	r2, #60	; 0x3c
 8000254:	2008      	movs	r0, #8
 8000256:	1812      	adds	r2, r2, r0
 8000258:	19d2      	adds	r2, r2, r7
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	759a      	strb	r2, [r3, #22]

	lcd.en_pin = en_pin;
 800025e:	187b      	adds	r3, r7, r1
 8000260:	2238      	movs	r2, #56	; 0x38
 8000262:	1812      	adds	r2, r2, r0
 8000264:	19d2      	adds	r2, r2, r7
 8000266:	8812      	ldrh	r2, [r2, #0]
 8000268:	829a      	strh	r2, [r3, #20]
	lcd.en_port = en_port;
 800026a:	187b      	adds	r3, r7, r1
 800026c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800026e:	611a      	str	r2, [r3, #16]

	lcd.rs_pin = rs_pin;
 8000270:	187a      	adds	r2, r7, r1
 8000272:	2330      	movs	r3, #48	; 0x30
 8000274:	181b      	adds	r3, r3, r0
 8000276:	19db      	adds	r3, r3, r7
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	8193      	strh	r3, [r2, #12]
	lcd.rs_port = rs_port;
 800027c:	000c      	movs	r4, r1
 800027e:	193b      	adds	r3, r7, r4
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	609a      	str	r2, [r3, #8]

	lcd.data_pin = pin;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	605a      	str	r2, [r3, #4]
	lcd.data_port = port;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	601a      	str	r2, [r3, #0]

	Lcd_init(&lcd);
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	f000 f80a 	bl	80002ac <Lcd_init>

	return lcd;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	193a      	adds	r2, r7, r4
 800029c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029e:	c313      	stmia	r3!, {r0, r1, r4}
 80002a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002a2:	c313      	stmia	r3!, {r0, r1, r4}
}
 80002a4:	68f8      	ldr	r0, [r7, #12]
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b00b      	add	sp, #44	; 0x2c
 80002aa:	bd90      	pop	{r4, r7, pc}

080002ac <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	7d9b      	ldrb	r3, [r3, #22]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10f      	bne.n	80002dc <Lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2133      	movs	r1, #51	; 0x33
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 f887 	bl	80003d4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2132      	movs	r1, #50	; 0x32
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 f882 	bl	80003d4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2128      	movs	r1, #40	; 0x28
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 f87d 	bl	80003d4 <lcd_write_command>
 80002da:	e004      	b.n	80002e6 <Lcd_init+0x3a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2138      	movs	r1, #56	; 0x38
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 f877 	bl	80003d4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2101      	movs	r1, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f872 	bl	80003d4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	210c      	movs	r1, #12
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 f86d 	bl	80003d4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2106      	movs	r1, #6
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 f868 	bl	80003d4 <lcd_write_command>
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b002      	add	sp, #8
 800030a:	bd80      	pop	{r7, pc}

0800030c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <Lcd_int+0x2c>)
 800031a:	240c      	movs	r4, #12
 800031c:	193b      	adds	r3, r7, r4
 800031e:	0018      	movs	r0, r3
 8000320:	f001 ffca 	bl	80022b8 <siprintf>

	Lcd_string(lcd, buffer);
 8000324:	193a      	adds	r2, r7, r4
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0011      	movs	r1, r2
 800032a:	0018      	movs	r0, r3
 800032c:	f000 f806 	bl	800033c <Lcd_string>
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b007      	add	sp, #28
 8000336:	bd90      	pop	{r4, r7, pc}
 8000338:	08002ba4 	.word	0x08002ba4

0800033c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000346:	230f      	movs	r3, #15
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	e00f      	b.n	8000370 <Lcd_string+0x34>
	{
		lcd_write_data(lcd, string[i]);
 8000350:	240f      	movs	r4, #15
 8000352:	193b      	adds	r3, r7, r4
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	18d3      	adds	r3, r2, r3
 800035a:	781a      	ldrb	r2, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	0011      	movs	r1, r2
 8000360:	0018      	movs	r0, r3
 8000362:	f000 f869 	bl	8000438 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000366:	193b      	adds	r3, r7, r4
 8000368:	781a      	ldrb	r2, [r3, #0]
 800036a:	193b      	adds	r3, r7, r4
 800036c:	3201      	adds	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
 8000370:	230f      	movs	r3, #15
 8000372:	18fb      	adds	r3, r7, r3
 8000374:	781c      	ldrb	r4, [r3, #0]
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	0018      	movs	r0, r3
 800037a:	f7ff fec3 	bl	8000104 <strlen>
 800037e:	0003      	movs	r3, r0
 8000380:	429c      	cmp	r4, r3
 8000382:	d3e5      	bcc.n	8000350 <Lcd_string+0x14>
	}
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b005      	add	sp, #20
 800038c:	bd90      	pop	{r4, r7, pc}
	...

08000390 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	0008      	movs	r0, r1
 800039a:	0011      	movs	r1, r2
 800039c:	1cfb      	adds	r3, r7, #3
 800039e:	1c02      	adds	r2, r0, #0
 80003a0:	701a      	strb	r2, [r3, #0]
 80003a2:	1cbb      	adds	r3, r7, #2
 80003a4:	1c0a      	adds	r2, r1, #0
 80003a6:	701a      	strb	r2, [r3, #0]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80003a8:	1cfb      	adds	r3, r7, #3
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <Lcd_cursor+0x40>)
 80003ae:	5cd2      	ldrb	r2, [r2, r3]
 80003b0:	1cbb      	adds	r3, r7, #2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	18d3      	adds	r3, r2, r3
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	3b80      	subs	r3, #128	; 0x80
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 f807 	bl	80003d4 <lcd_write_command>
	#endif
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b002      	add	sp, #8
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	08002bc8 	.word	0x08002bc8

080003d4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	000a      	movs	r2, r1
 80003de:	1cfb      	adds	r3, r7, #3
 80003e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6898      	ldr	r0, [r3, #8]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	899b      	ldrh	r3, [r3, #12]
 80003ea:	2200      	movs	r2, #0
 80003ec:	0019      	movs	r1, r3
 80003ee:	f000 ff24 	bl	800123a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	7d9b      	ldrb	r3, [r3, #22]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d113      	bne.n	8000422 <lcd_write_command+0x4e>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003fa:	1cfb      	adds	r3, r7, #3
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	091b      	lsrs	r3, r3, #4
 8000400:	b2d9      	uxtb	r1, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2204      	movs	r2, #4
 8000406:	0018      	movs	r0, r3
 8000408:	f000 f848 	bl	800049c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800040c:	1cfb      	adds	r3, r7, #3
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	220f      	movs	r2, #15
 8000412:	4013      	ands	r3, r2
 8000414:	b2d9      	uxtb	r1, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2204      	movs	r2, #4
 800041a:	0018      	movs	r0, r3
 800041c:	f000 f83e 	bl	800049c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000420:	e006      	b.n	8000430 <lcd_write_command+0x5c>
		lcd_write(lcd, command, LCD_BYTE);
 8000422:	1cfb      	adds	r3, r7, #3
 8000424:	7819      	ldrb	r1, [r3, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2208      	movs	r2, #8
 800042a:	0018      	movs	r0, r3
 800042c:	f000 f836 	bl	800049c <lcd_write>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}

08000438 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	000a      	movs	r2, r1
 8000442:	1cfb      	adds	r3, r7, #3
 8000444:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6898      	ldr	r0, [r3, #8]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	899b      	ldrh	r3, [r3, #12]
 800044e:	2201      	movs	r2, #1
 8000450:	0019      	movs	r1, r3
 8000452:	f000 fef2 	bl	800123a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	7d9b      	ldrb	r3, [r3, #22]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d113      	bne.n	8000486 <lcd_write_data+0x4e>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800045e:	1cfb      	adds	r3, r7, #3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	b2d9      	uxtb	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2204      	movs	r2, #4
 800046a:	0018      	movs	r0, r3
 800046c:	f000 f816 	bl	800049c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000470:	1cfb      	adds	r3, r7, #3
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	220f      	movs	r2, #15
 8000476:	4013      	ands	r3, r2
 8000478:	b2d9      	uxtb	r1, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2204      	movs	r2, #4
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f80c 	bl	800049c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000484:	e006      	b.n	8000494 <lcd_write_data+0x5c>
		lcd_write(lcd, data, LCD_BYTE);
 8000486:	1cfb      	adds	r3, r7, #3
 8000488:	7819      	ldrb	r1, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2208      	movs	r2, #8
 800048e:	0018      	movs	r0, r3
 8000490:	f000 f804 	bl	800049c <lcd_write>
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	0008      	movs	r0, r1
 80004a6:	0011      	movs	r1, r2
 80004a8:	1cfb      	adds	r3, r7, #3
 80004aa:	1c02      	adds	r2, r0, #0
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	1cbb      	adds	r3, r7, #2
 80004b0:	1c0a      	adds	r2, r1, #0
 80004b2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 80004b4:	230f      	movs	r3, #15
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	e020      	b.n	8000500 <lcd_write+0x64>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	240f      	movs	r4, #15
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	6818      	ldr	r0, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	8819      	ldrh	r1, [r3, #0]
 80004dc:	1cfb      	adds	r3, r7, #3
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	411a      	asrs	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2201      	movs	r2, #1
 80004ec:	4013      	ands	r3, r2
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	001a      	movs	r2, r3
 80004f2:	f000 fea2 	bl	800123a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	3201      	adds	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	230f      	movs	r3, #15
 8000502:	18fa      	adds	r2, r7, r3
 8000504:	1cbb      	adds	r3, r7, #2
 8000506:	7812      	ldrb	r2, [r2, #0]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	429a      	cmp	r2, r3
 800050c:	d3d7      	bcc.n	80004be <lcd_write+0x22>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6918      	ldr	r0, [r3, #16]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	8a9b      	ldrh	r3, [r3, #20]
 8000516:	2201      	movs	r2, #1
 8000518:	0019      	movs	r1, r3
 800051a:	f000 fe8e 	bl	800123a <HAL_GPIO_WritePin>
	DELAY(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f000 fc32 	bl	8000d88 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6918      	ldr	r0, [r3, #16]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	8a9b      	ldrh	r3, [r3, #20]
 800052c:	2200      	movs	r2, #0
 800052e:	0019      	movs	r1, r3
 8000530:	f000 fe83 	bl	800123a <HAL_GPIO_WritePin>
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b005      	add	sp, #20
 800053a:	bd90      	pop	{r4, r7, pc}

0800053c <delay>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void delay (uint16_t delay){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	1dbb      	adds	r3, r7, #6
 8000546:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <delay+0x30>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <delay+0x30>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000558:	1dbb      	adds	r3, r7, #6
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d3f8      	bcc.n	8000552 <delay+0x16>
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	2000008c 	.word	0x2000008c

08000570 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin){
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b089      	sub	sp, #36	; 0x24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	000a      	movs	r2, r1
 800057a:	1cbb      	adds	r3, r7, #2
 800057c:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	240c      	movs	r4, #12
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f001 fe8d 	bl	80022a8 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 800058e:	1cbb      	adds	r3, r7, #2
 8000590:	881a      	ldrh	r2, [r3, #0]
 8000592:	193b      	adds	r3, r7, r4
 8000594:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2201      	movs	r2, #1
 800059a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 80005a2:	193a      	adds	r2, r7, r4
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fcc5 	bl	8000f38 <HAL_GPIO_Init>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b009      	add	sp, #36	; 0x24
 80005b4:	bd90      	pop	{r4, r7, pc}

080005b6 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin){
 80005b6:	b590      	push	{r4, r7, lr}
 80005b8:	b089      	sub	sp, #36	; 0x24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	000a      	movs	r2, r1
 80005c0:	1cbb      	adds	r3, r7, #2
 80005c2:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	240c      	movs	r4, #12
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	0018      	movs	r0, r3
 80005ca:	2314      	movs	r3, #20
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f001 fe6a 	bl	80022a8 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 80005d4:	1cbb      	adds	r3, r7, #2
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2201      	movs	r2, #1
 80005e6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005e8:	193a      	adds	r2, r7, r4
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fca2 	bl	8000f38 <HAL_GPIO_Init>
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b009      	add	sp, #36	; 0x24
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <DHT11_Start>:

void DHT11_Start (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	Set_Pin_Output (GPIOD, GPIO_PIN_0);  // set the pin as output
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <DHT11_Start+0x30>)
 8000602:	2101      	movs	r1, #1
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ffb3 	bl	8000570 <Set_Pin_Output>
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_0,GPIO_PIN_RESET);   // pull the pin low
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <DHT11_Start+0x30>)
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fe12 	bl	800123a <HAL_GPIO_WritePin>
	HAL_Delay(18);   // wait for 18ms
 8000616:	2012      	movs	r0, #18
 8000618:	f000 fbb6 	bl	8000d88 <HAL_Delay>
	Set_Pin_Input(GPIOD,GPIO_PIN_0);    // set as input
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <DHT11_Start+0x30>)
 800061e:	2101      	movs	r1, #1
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff ffc8 	bl	80005b6 <Set_Pin_Input>
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	50000c00 	.word	0x50000c00

08000630 <Check_Response>:

uint8_t Check_Response (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	delay (40);
 800063c:	2028      	movs	r0, #40	; 0x28
 800063e:	f7ff ff7d 	bl	800053c <delay>
	if (!(HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_0)))
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <Check_Response+0x60>)
 8000644:	2101      	movs	r1, #1
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fdda 	bl	8001200 <HAL_GPIO_ReadPin>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d110      	bne.n	8000672 <Check_Response+0x42>
	{
		delay (80);
 8000650:	2050      	movs	r0, #80	; 0x50
 8000652:	f7ff ff73 	bl	800053c <delay>
		if ((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_0))) Response = 1;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <Check_Response+0x60>)
 8000658:	2101      	movs	r1, #1
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fdd0 	bl	8001200 <HAL_GPIO_ReadPin>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d003      	beq.n	800066c <Check_Response+0x3c>
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e002      	b.n	8000672 <Check_Response+0x42>
		else Response = -1;
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_0)));   // wait for the pin to go low
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <Check_Response+0x60>)
 8000676:	2101      	movs	r1, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fdc1 	bl	8001200 <HAL_GPIO_ReadPin>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d1f8      	bne.n	8000674 <Check_Response+0x44>

	return Response;
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
}
 8000686:	0018      	movs	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	50000c00 	.word	0x50000c00

08000694 <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e03f      	b.n	8000722 <DHT11_Read+0x8e>
	{
		while (!(HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_0)));   // wait for the pin to go high
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <DHT11_Read+0xa4>)
 80006a6:	2101      	movs	r1, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fda9 	bl	8001200 <HAL_GPIO_ReadPin>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d0f8      	beq.n	80006a4 <DHT11_Read+0x10>
		delay (40);   // wait for 40 us
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f7ff ff42 	bl	800053c <delay>
		if (!(HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_0)))   // if the pin is low
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <DHT11_Read+0xa4>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fd9f 	bl	8001200 <HAL_GPIO_ReadPin>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d111      	bne.n	80006ea <DHT11_Read+0x56>
		{
			i&= ~(1<<(7-j));   // write 0
 80006c6:	1dbb      	adds	r3, r7, #6
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2207      	movs	r2, #7
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2201      	movs	r2, #1
 80006d0:	409a      	lsls	r2, r3
 80006d2:	0013      	movs	r3, r2
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	43db      	mvns	r3, r3
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	1dfa      	adds	r2, r7, #7
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	b252      	sxtb	r2, r2
 80006e0:	4013      	ands	r3, r2
 80006e2:	b25a      	sxtb	r2, r3
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e00e      	b.n	8000708 <DHT11_Read+0x74>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80006ea:	1dbb      	adds	r3, r7, #6
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2207      	movs	r2, #7
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	2201      	movs	r2, #1
 80006f4:	409a      	lsls	r2, r3
 80006f6:	0013      	movs	r3, r2
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b25a      	sxtb	r2, r3
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	701a      	strb	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_0)));  // wait for the pin to go low
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <DHT11_Read+0xa4>)
 800070c:	2101      	movs	r1, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fd76 	bl	8001200 <HAL_GPIO_ReadPin>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d1f8      	bne.n	800070a <DHT11_Read+0x76>
	for (j=0;j<8;j++)
 8000718:	1dbb      	adds	r3, r7, #6
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	3201      	adds	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b07      	cmp	r3, #7
 8000728:	d9bb      	bls.n	80006a2 <DHT11_Read+0xe>
	}
	return i;
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
}
 800072e:	0018      	movs	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	50000c00 	.word	0x50000c00

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	b097      	sub	sp, #92	; 0x5c
 8000740:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fa9b 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f88d 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f93f 	bl	80009cc <MX_GPIO_Init>
  MX_TIM3_Init();
 800074e:	f000 f8e7 	bl	8000920 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <main+0xfc>)
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fac9 	bl	8001cec <HAL_TIM_Base_Start>
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 800075a:	2138      	movs	r1, #56	; 0x38
 800075c:	187b      	adds	r3, r7, r1
 800075e:	4a37      	ldr	r2, [pc, #220]	; (800083c <main+0x100>)
 8000760:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000762:	c331      	stmia	r3!, {r0, r4, r5}
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	601a      	str	r2, [r3, #0]
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_0, GPIO_PIN_7, GPIO_PIN_6};
 8000768:	2330      	movs	r3, #48	; 0x30
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	4a34      	ldr	r2, [pc, #208]	; (8000840 <main+0x104>)
 800076e:	ca11      	ldmia	r2!, {r0, r4}
 8000770:	c311      	stmia	r3!, {r0, r4}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9, LCD_4_BIT_MODE);
 8000772:	2618      	movs	r6, #24
 8000774:	19bd      	adds	r5, r7, r6
 8000776:	0038      	movs	r0, r7
 8000778:	23a0      	movs	r3, #160	; 0xa0
 800077a:	05dc      	lsls	r4, r3, #23
 800077c:	2330      	movs	r3, #48	; 0x30
 800077e:	18fa      	adds	r2, r7, r3
 8000780:	1879      	adds	r1, r7, r1
 8000782:	2300      	movs	r3, #0
 8000784:	9303      	str	r3, [sp, #12]
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	9302      	str	r3, [sp, #8]
 800078c:	23a0      	movs	r3, #160	; 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	0023      	movs	r3, r4
 800079a:	f7ff fd51 	bl	8000240 <Lcd_create>
 800079e:	003a      	movs	r2, r7
 80007a0:	002b      	movs	r3, r5
 80007a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a4:	c313      	stmia	r3!, {r0, r1, r4}
 80007a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a8:	c313      	stmia	r3!, {r0, r1, r4}
  Lcd_cursor(&lcd, 0,1);
 80007aa:	19bb      	adds	r3, r7, r6
 80007ac:	2201      	movs	r2, #1
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fded 	bl	8000390 <Lcd_cursor>

  Lcd_string(&lcd, "AMOGUS!");
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <main+0x108>)
 80007b8:	19bb      	adds	r3, r7, r6
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fdbd 	bl	800033c <Lcd_string>
  Lcd_cursor(&lcd, 1,0);
 80007c2:	19bb      	adds	r3, r7, r6
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fde1 	bl	8000390 <Lcd_cursor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT11_Start();
 80007ce:	f7ff ff15 	bl	80005fc <DHT11_Start>
	  Presence = Check_Response();
 80007d2:	f7ff ff2d 	bl	8000630 <Check_Response>
 80007d6:	0003      	movs	r3, r0
 80007d8:	001a      	movs	r2, r3
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <main+0x10c>)
 80007dc:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read();
 80007de:	f7ff ff59 	bl	8000694 <DHT11_Read>
 80007e2:	0003      	movs	r3, r0
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <main+0x110>)
 80007e8:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read();
 80007ea:	f7ff ff53 	bl	8000694 <DHT11_Read>
 80007ee:	0003      	movs	r3, r0
 80007f0:	001a      	movs	r2, r3
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <main+0x114>)
 80007f4:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read();
 80007f6:	f7ff ff4d 	bl	8000694 <DHT11_Read>
 80007fa:	0003      	movs	r3, r0
 80007fc:	001a      	movs	r2, r3
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <main+0x118>)
 8000800:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read();
 8000802:	f7ff ff47 	bl	8000694 <DHT11_Read>
 8000806:	0003      	movs	r3, r0
 8000808:	001a      	movs	r2, r3
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <main+0x11c>)
 800080c:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 800080e:	f7ff ff41 	bl	8000694 <DHT11_Read>
 8000812:	0003      	movs	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <main+0x120>)
 8000818:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <main+0x118>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <main+0x124>)
 8000822:	801a      	strh	r2, [r3, #0]
	  Lcd_int(&lcd,TEMP);
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <main+0x124>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	001a      	movs	r2, r3
 800082a:	2318      	movs	r3, #24
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff fd6b 	bl	800030c <Lcd_int>
	  DHT11_Start();
 8000836:	e7ca      	b.n	80007ce <main+0x92>
 8000838:	2000008c 	.word	0x2000008c
 800083c:	08002bb0 	.word	0x08002bb0
 8000840:	08002bc0 	.word	0x08002bc0
 8000844:	08002ba8 	.word	0x08002ba8
 8000848:	200000e0 	.word	0x200000e0
 800084c:	200000d8 	.word	0x200000d8
 8000850:	200000d9 	.word	0x200000d9
 8000854:	200000da 	.word	0x200000da
 8000858:	200000db 	.word	0x200000db
 800085c:	200000dc 	.word	0x200000dc
 8000860:	200000de 	.word	0x200000de

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b093      	sub	sp, #76	; 0x4c
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	2410      	movs	r4, #16
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2338      	movs	r3, #56	; 0x38
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f001 fd17 	bl	80022a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087a:	003b      	movs	r3, r7
 800087c:	0018      	movs	r0, r3
 800087e:	2310      	movs	r3, #16
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f001 fd10 	bl	80022a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fcf1 	bl	8001274 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2202      	movs	r2, #2
 8000896:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008a0:	0021      	movs	r1, r4
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2240      	movs	r2, #64	; 0x40
 80008ac:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2202      	movs	r2, #2
 80008b2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2202      	movs	r2, #2
 80008b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2208      	movs	r2, #8
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	0292      	lsls	r2, r2, #10
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0492      	lsls	r2, r2, #18
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0592      	lsls	r2, r2, #22
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fd07 	bl	80012f4 <HAL_RCC_OscConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008ea:	f000 f901 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	003b      	movs	r3, r7
 80008f0:	2207      	movs	r2, #7
 80008f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	003b      	movs	r3, r7
 80008f6:	2202      	movs	r2, #2
 80008f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000900:	003b      	movs	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000906:	003b      	movs	r3, r7
 8000908:	2102      	movs	r1, #2
 800090a:	0018      	movs	r0, r3
 800090c:	f001 f80c 	bl	8001928 <HAL_RCC_ClockConfig>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000914:	f000 f8ec 	bl	8000af0 <Error_Handler>
  }
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b013      	add	sp, #76	; 0x4c
 800091e:	bd90      	pop	{r4, r7, pc}

08000920 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	2310      	movs	r3, #16
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	2310      	movs	r3, #16
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f001 fcb9 	bl	80022a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	230c      	movs	r3, #12
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f001 fcb2 	bl	80022a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM3_Init+0xa0>)
 8000946:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <MX_TIM3_Init+0xa4>)
 8000948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM3_Init+0xa0>)
 800094c:	223f      	movs	r2, #63	; 0x3f
 800094e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM3_Init+0xa0>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_TIM3_Init+0xa0>)
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_TIM3_Init+0xa8>)
 800095a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_TIM3_Init+0xa0>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_TIM3_Init+0xa0>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM3_Init+0xa0>)
 800096a:	0018      	movs	r0, r3
 800096c:	f001 f966 	bl	8001c3c <HAL_TIM_Base_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f8bc 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	2110      	movs	r1, #16
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0152      	lsls	r2, r2, #5
 8000980:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000982:	187a      	adds	r2, r7, r1
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_TIM3_Init+0xa0>)
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fa03 	bl	8001d94 <HAL_TIM_ConfigClockSource>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000992:	f000 f8ad 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a2:	1d3a      	adds	r2, r7, #4
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_TIM3_Init+0xa0>)
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 fbe5 	bl	8002178 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009b2:	f000 f89d 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b008      	add	sp, #32
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	2000008c 	.word	0x2000008c
 80009c4:	40000400 	.word	0x40000400
 80009c8:	0000ffff 	.word	0x0000ffff

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	2414      	movs	r4, #20
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	0018      	movs	r0, r3
 80009d8:	2314      	movs	r3, #20
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f001 fc63 	bl	80022a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <MX_GPIO_Init+0x118>)
 80009e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e6:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <MX_GPIO_Init+0x118>)
 80009e8:	2104      	movs	r1, #4
 80009ea:	430a      	orrs	r2, r1
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
 80009ee:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <MX_GPIO_Init+0x118>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	2204      	movs	r2, #4
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <MX_GPIO_Init+0x118>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a00:	2120      	movs	r1, #32
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
 8000a06:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a22:	2201      	movs	r2, #1
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a30:	2102      	movs	r1, #2
 8000a32:	430a      	orrs	r2, r1
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin|RS_Pin|Enable_Pin, GPIO_PIN_RESET);
 8000a42:	23f0      	movs	r3, #240	; 0xf0
 8000a44:	0099      	lsls	r1, r3, #2
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fbf4 	bl	800123a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_GPIO_Init+0x11c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fbee 	bl	800123a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <MX_GPIO_Init+0x120>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 fbe8 	bl	800123a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D7_Pin D6_Pin RS_Pin Enable_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|RS_Pin|Enable_Pin;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	22f0      	movs	r2, #240	; 0xf0
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	193a      	adds	r2, r7, r4
 8000a86:	23a0      	movs	r3, #160	; 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 fa53 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : D5_Pin */
  GPIO_InitStruct.Pin = D5_Pin;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <MX_GPIO_Init+0x11c>)
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f000 fa41 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8000ab6:	0021      	movs	r1, r4
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <MX_GPIO_Init+0x120>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f000 fa2e 	bl	8000f38 <HAL_GPIO_Init>

}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b00b      	add	sp, #44	; 0x2c
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	50000400 	.word	0x50000400
 8000aec:	50000800 	.word	0x50000800

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x44>)
 8000b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_MspInit+0x44>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x44>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_MspInit+0x44>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0549      	lsls	r1, r1, #21
 8000b24:	430a      	orrs	r2, r1
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_MspInit+0x44>)
 8000b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	055b      	lsls	r3, r3, #21
 8000b30:	4013      	ands	r3, r2
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <HAL_TIM_Base_MspInit+0x34>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10b      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_TIM_Base_MspInit+0x38>)
 8000b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_TIM_Base_MspInit+0x38>)
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_TIM_Base_MspInit+0x38>)
 8000b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b66:	2202      	movs	r2, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b004      	add	sp, #16
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40021000 	.word	0x40021000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f8d4 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f001 fb38 	bl	8002254 <__errno>
 8000be4:	0003      	movs	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	425b      	negs	r3, r3
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	18d2      	adds	r2, r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <_sbrk+0x64>)
 8000c00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20009000 	.word	0x20009000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	200000e4 	.word	0x200000e4
 8000c18:	20000100 	.word	0x20000100

08000c1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c2c:	f7ff fff6 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LoopForever+0xe>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <LoopForever+0x16>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c56:	f001 fb03 	bl	8002260 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c5a:	f7ff fd6f 	bl	800073c <main>

08000c5e <LoopForever>:

LoopForever:
  b LoopForever
 8000c5e:	e7fe      	b.n	8000c5e <LoopForever>
  ldr   r0, =_estack
 8000c60:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c6c:	08002c48 	.word	0x08002c48
  ldr r2, =_sbss
 8000c70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c74:	200000fc 	.word	0x200000fc

08000c78 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_COMP_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x3c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Init+0x3c>)
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	0049      	lsls	r1, r1, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f810 	bl	8000cbc <HAL_InitTick>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e001      	b.n	8000cac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff ff28 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_InitTick+0x88>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d02b      	beq.n	8000d2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_InitTick+0x8c>)
 8000cd6:	681c      	ldr	r4, [r3, #0]
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_InitTick+0x88>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	0019      	movs	r1, r3
 8000cde:	23fa      	movs	r3, #250	; 0xfa
 8000ce0:	0098      	lsls	r0, r3, #2
 8000ce2:	f7ff fa21 	bl	8000128 <__udivsi3>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0020      	movs	r0, r4
 8000cec:	f7ff fa1c 	bl	8000128 <__udivsi3>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f913 	bl	8000f1e <HAL_SYSTICK_Config>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d112      	bne.n	8000d22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d80a      	bhi.n	8000d18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	2301      	movs	r3, #1
 8000d06:	425b      	negs	r3, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f8f2 	bl	8000ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_InitTick+0x90>)
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e00d      	b.n	8000d34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d18:	230f      	movs	r3, #15
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e008      	b.n	8000d34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d22:	230f      	movs	r3, #15
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e003      	b.n	8000d34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b005      	add	sp, #20
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	001a      	movs	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	18d2      	adds	r2, r2, r3
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_IncTick+0x20>)
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200000e8 	.word	0x200000e8

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <HAL_GetTick+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	200000e8 	.word	0x200000e8

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff0 	bl	8000d74 <HAL_GetTick>
 8000d94:	0003      	movs	r3, r0
 8000d96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	001a      	movs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	189b      	adds	r3, r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	f7ff ffe0 	bl	8000d74 <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b004      	add	sp, #16
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b7f      	cmp	r3, #127	; 0x7f
 8000de4:	d828      	bhi.n	8000e38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de6:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <__NVIC_SetPriority+0xd4>)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	33c0      	adds	r3, #192	; 0xc0
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	589b      	ldr	r3, [r3, r2]
 8000df6:	1dfa      	adds	r2, r7, #7
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	400a      	ands	r2, r1
 8000e00:	00d2      	lsls	r2, r2, #3
 8000e02:	21ff      	movs	r1, #255	; 0xff
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	43d2      	mvns	r2, r2
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	22ff      	movs	r2, #255	; 0xff
 8000e14:	401a      	ands	r2, r3
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	4003      	ands	r3, r0
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e24:	481f      	ldr	r0, [pc, #124]	; (8000ea4 <__NVIC_SetPriority+0xd4>)
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	33c0      	adds	r3, #192	; 0xc0
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e36:	e031      	b.n	8000e9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <__NVIC_SetPriority+0xd8>)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	0019      	movs	r1, r3
 8000e40:	230f      	movs	r3, #15
 8000e42:	400b      	ands	r3, r1
 8000e44:	3b08      	subs	r3, #8
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3306      	adds	r3, #6
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	18d3      	adds	r3, r2, r3
 8000e4e:	3304      	adds	r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	0011      	movs	r1, r2
 8000e58:	2203      	movs	r2, #3
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	21ff      	movs	r1, #255	; 0xff
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	22ff      	movs	r2, #255	; 0xff
 8000e70:	401a      	ands	r2, r3
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	2303      	movs	r3, #3
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <__NVIC_SetPriority+0xd8>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	001c      	movs	r4, r3
 8000e88:	230f      	movs	r3, #15
 8000e8a:	4023      	ands	r3, r4
 8000e8c:	3b08      	subs	r3, #8
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	430a      	orrs	r2, r1
 8000e92:	3306      	adds	r3, #6
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	18c3      	adds	r3, r0, r3
 8000e98:	3304      	adds	r3, #4
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	045b      	lsls	r3, r3, #17
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d301      	bcc.n	8000ec4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e010      	b.n	8000ee6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <SysTick_Config+0x44>)
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	425b      	negs	r3, r3
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff ff7c 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x44>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x44>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	210f      	movs	r1, #15
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	1c02      	adds	r2, r0, #0
 8000f04:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ffbf 	bl	8000eac <SysTick_Config>
 8000f2e:	0003      	movs	r3, r0
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e147      	b.n	80011d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4091      	lsls	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d100      	bne.n	8000f60 <HAL_GPIO_Init+0x28>
 8000f5e:	e138      	b.n	80011d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d005      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2203      	movs	r2, #3
 800101c:	4013      	ands	r3, r2
 800101e:	2b02      	cmp	r3, #2
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	58d3      	ldr	r3, [r2, r3]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2207      	movs	r2, #7
 8001034:	4013      	ands	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2107      	movs	r1, #7
 800104e:	400b      	ands	r3, r1
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	6939      	ldr	r1, [r7, #16]
 8001068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	401a      	ands	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	23c0      	movs	r3, #192	; 0xc0
 80010a4:	029b      	lsls	r3, r3, #10
 80010a6:	4013      	ands	r3, r2
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x174>
 80010aa:	e092      	b.n	80011d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3318      	adds	r3, #24
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	589b      	ldr	r3, [r3, r2]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	220f      	movs	r2, #15
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	23a0      	movs	r3, #160	; 0xa0
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1ca>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <HAL_GPIO_Init+0x2bc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1c6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a44      	ldr	r2, [pc, #272]	; (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1c2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a43      	ldr	r2, [pc, #268]	; (80011fc <HAL_GPIO_Init+0x2c4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1be>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 8001102:	2300      	movs	r3, #0
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	2103      	movs	r1, #3
 8001108:	400a      	ands	r2, r1
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	4093      	lsls	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001114:	4936      	ldr	r1, [pc, #216]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3318      	adds	r3, #24
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	035b      	lsls	r3, r3, #13
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	039b      	lsls	r3, r3, #14
 8001164:	4013      	ands	r3, r2
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001178:	2384      	movs	r3, #132	; 0x84
 800117a:	58d3      	ldr	r3, [r2, r3]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4914      	ldr	r1, [pc, #80]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 800119e:	2284      	movs	r2, #132	; 0x84
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	58d3      	ldr	r3, [r2, r3]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	4013      	ands	r3, r2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ca:	4909      	ldr	r1, [pc, #36]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	40da      	lsrs	r2, r3
 80011e0:	1e13      	subs	r3, r2, #0
 80011e2:	d000      	beq.n	80011e6 <HAL_GPIO_Init+0x2ae>
 80011e4:	e6b0      	b.n	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b006      	add	sp, #24
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021800 	.word	0x40021800
 80011f4:	50000400 	.word	0x50000400
 80011f8:	50000800 	.word	0x50000800
 80011fc:	50000c00 	.word	0x50000c00

08001200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	000a      	movs	r2, r1
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	1cba      	adds	r2, r7, #2
 8001214:	8812      	ldrh	r2, [r2, #0]
 8001216:	4013      	ands	r3, r2
 8001218:	d004      	beq.n	8001224 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800121a:	230f      	movs	r3, #15
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e003      	b.n	800122c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800122c:	230f      	movs	r3, #15
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	781b      	ldrb	r3, [r3, #0]
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	0008      	movs	r0, r1
 8001244:	0011      	movs	r1, r2
 8001246:	1cbb      	adds	r3, r7, #2
 8001248:	1c02      	adds	r2, r0, #0
 800124a:	801a      	strh	r2, [r3, #0]
 800124c:	1c7b      	adds	r3, r7, #1
 800124e:	1c0a      	adds	r2, r1, #0
 8001250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001252:	1c7b      	adds	r3, r7, #1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125a:	1cbb      	adds	r3, r7, #2
 800125c:	881a      	ldrh	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001262:	e003      	b.n	800126c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001264:	1cbb      	adds	r3, r7, #2
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001282:	4013      	ands	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	429a      	cmp	r2, r3
 8001296:	d11f      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	0013      	movs	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	189b      	adds	r3, r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7fe ff3e 	bl	8000128 <__udivsi3>
 80012ac:	0003      	movs	r3, r0
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b2:	e008      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e001      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e009      	b.n	80012da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	401a      	ands	r2, r3
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d0ed      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	40007000 	.word	0x40007000
 80012e8:	fffff9ff 	.word	0xfffff9ff
 80012ec:	20000000 	.word	0x20000000
 80012f0:	000f4240 	.word	0x000f4240

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e2fe      	b.n	8001904 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	d100      	bne.n	8001312 <HAL_RCC_OscConfig+0x1e>
 8001310:	e07c      	b.n	800140c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001312:	4bc3      	ldr	r3, [pc, #780]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2238      	movs	r2, #56	; 0x38
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800131c:	4bc0      	ldr	r3, [pc, #768]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2203      	movs	r2, #3
 8001322:	4013      	ands	r3, r2
 8001324:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b10      	cmp	r3, #16
 800132a:	d102      	bne.n	8001332 <HAL_RCC_OscConfig+0x3e>
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d002      	beq.n	8001338 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b08      	cmp	r3, #8
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4bb9      	ldr	r3, [pc, #740]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	d062      	beq.n	800140a <HAL_RCC_OscConfig+0x116>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d15e      	bne.n	800140a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e2d9      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	025b      	lsls	r3, r3, #9
 8001358:	429a      	cmp	r2, r3
 800135a:	d107      	bne.n	800136c <HAL_RCC_OscConfig+0x78>
 800135c:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4baf      	ldr	r3, [pc, #700]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	0249      	lsls	r1, r1, #9
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e020      	b.n	80013ae <HAL_RCC_OscConfig+0xba>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	23a0      	movs	r3, #160	; 0xa0
 8001372:	02db      	lsls	r3, r3, #11
 8001374:	429a      	cmp	r2, r3
 8001376:	d10e      	bne.n	8001396 <HAL_RCC_OscConfig+0xa2>
 8001378:	4ba9      	ldr	r3, [pc, #676]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4ba8      	ldr	r3, [pc, #672]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	02c9      	lsls	r1, r1, #11
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	4ba6      	ldr	r3, [pc, #664]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4ba5      	ldr	r3, [pc, #660]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0249      	lsls	r1, r1, #9
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e00b      	b.n	80013ae <HAL_RCC_OscConfig+0xba>
 8001396:	4ba2      	ldr	r3, [pc, #648]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4ba1      	ldr	r3, [pc, #644]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800139c:	49a1      	ldr	r1, [pc, #644]	; (8001624 <HAL_RCC_OscConfig+0x330>)
 800139e:	400a      	ands	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	4b9f      	ldr	r3, [pc, #636]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b9e      	ldr	r3, [pc, #632]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	499f      	ldr	r1, [pc, #636]	; (8001628 <HAL_RCC_OscConfig+0x334>)
 80013aa:	400a      	ands	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d014      	beq.n	80013e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fcdd 	bl	8000d74 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fcd8 	bl	8000d74 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e298      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d2:	4b93      	ldr	r3, [pc, #588]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	029b      	lsls	r3, r3, #10
 80013da:	4013      	ands	r3, r2
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0xcc>
 80013de:	e015      	b.n	800140c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcc8 	bl	8000d74 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ea:	f7ff fcc3 	bl	8000d74 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e283      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fc:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0xf6>
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d100      	bne.n	8001418 <HAL_RCC_OscConfig+0x124>
 8001416:	e099      	b.n	800154c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001418:	4b81      	ldr	r3, [pc, #516]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2238      	movs	r2, #56	; 0x38
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001422:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2203      	movs	r2, #3
 8001428:	4013      	ands	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b10      	cmp	r3, #16
 8001430:	d102      	bne.n	8001438 <HAL_RCC_OscConfig+0x144>
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d002      	beq.n	800143e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d135      	bne.n	80014aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800143e:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4013      	ands	r3, r2
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x162>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e256      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b72      	ldr	r3, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a74      	ldr	r2, [pc, #464]	; (800162c <HAL_RCC_OscConfig+0x338>)
 800145c:	4013      	ands	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	021a      	lsls	r2, r3, #8
 8001466:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d112      	bne.n	8001498 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001472:	4b6b      	ldr	r3, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x33c>)
 8001478:	4013      	ands	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	4b67      	ldr	r3, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001486:	4b66      	ldr	r3, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0adb      	lsrs	r3, r3, #11
 800148c:	2207      	movs	r2, #7
 800148e:	4013      	ands	r3, r2
 8001490:	4a68      	ldr	r2, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x340>)
 8001492:	40da      	lsrs	r2, r3
 8001494:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x344>)
 8001496:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001498:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_RCC_OscConfig+0x348>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fc0d 	bl	8000cbc <HAL_InitTick>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d051      	beq.n	800154a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e22c      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d030      	beq.n	8001514 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014b2:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a5e      	ldr	r2, [pc, #376]	; (8001630 <HAL_RCC_OscConfig+0x33c>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	0019      	movs	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	4b57      	ldr	r3, [pc, #348]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014c6:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b55      	ldr	r3, [pc, #340]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0049      	lsls	r1, r1, #1
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc4e 	bl	8000d74 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff fc49 	bl	8000d74 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e209      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4013      	ands	r3, r2
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_RCC_OscConfig+0x338>)
 8001502:	4013      	ands	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	021a      	lsls	r2, r3, #8
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001514:	4b42      	ldr	r3, [pc, #264]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800151a:	4949      	ldr	r1, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x34c>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fc28 	bl	8000d74 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fc23 	bl	8000d74 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1e3      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800153c:	4b38      	ldr	r3, [pc, #224]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4013      	ands	r3, r2
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x236>
 8001548:	e000      	b.n	800154c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2208      	movs	r2, #8
 8001552:	4013      	ands	r3, r2
 8001554:	d047      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001556:	4b32      	ldr	r3, [pc, #200]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2238      	movs	r2, #56	; 0x38
 800155c:	4013      	ands	r3, r2
 800155e:	2b18      	cmp	r3, #24
 8001560:	d10a      	bne.n	8001578 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	2202      	movs	r2, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d03c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d138      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e1c5      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d019      	beq.n	80015b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001582:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001586:	2101      	movs	r1, #1
 8001588:	430a      	orrs	r2, r1
 800158a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fbf2 	bl	8000d74 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fbed 	bl	8000d74 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1ad      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d0f1      	beq.n	8001596 <HAL_RCC_OscConfig+0x2a2>
 80015b2:	e018      	b.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	438a      	bics	r2, r1
 80015be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fbd8 	bl	8000d74 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fbd3 	bl	8000d74 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e193      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80015de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f1      	bne.n	80015ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2fe>
 80015f0:	e0c6      	b.n	8001780 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	231f      	movs	r3, #31
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2238      	movs	r2, #56	; 0x38
 8001600:	4013      	ands	r3, r2
 8001602:	2b20      	cmp	r3, #32
 8001604:	d11e      	bne.n	8001644 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RCC_OscConfig+0x32c>)
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x31e>
 8001610:	e0b6      	b.n	8001780 <HAL_RCC_OscConfig+0x48c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d000      	beq.n	800161c <HAL_RCC_OscConfig+0x328>
 800161a:	e0b1      	b.n	8001780 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e171      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
 8001620:	40021000 	.word	0x40021000
 8001624:	fffeffff 	.word	0xfffeffff
 8001628:	fffbffff 	.word	0xfffbffff
 800162c:	ffff80ff 	.word	0xffff80ff
 8001630:	ffffc7ff 	.word	0xffffc7ff
 8001634:	00f42400 	.word	0x00f42400
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004
 8001640:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001644:	4bb1      	ldr	r3, [pc, #708]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	055b      	lsls	r3, r3, #21
 800164c:	4013      	ands	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x360>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x362>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d011      	beq.n	800167e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4bac      	ldr	r3, [pc, #688]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800165c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165e:	4bab      	ldr	r3, [pc, #684]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0549      	lsls	r1, r1, #21
 8001664:	430a      	orrs	r2, r1
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c
 8001668:	4ba8      	ldr	r3, [pc, #672]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800166a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	055b      	lsls	r3, r3, #21
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001676:	231f      	movs	r3, #31
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167e:	4ba4      	ldr	r3, [pc, #656]	; (8001910 <HAL_RCC_OscConfig+0x61c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4013      	ands	r3, r2
 8001688:	d11a      	bne.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168a:	4ba1      	ldr	r3, [pc, #644]	; (8001910 <HAL_RCC_OscConfig+0x61c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <HAL_RCC_OscConfig+0x61c>)
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	0049      	lsls	r1, r1, #1
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001698:	f7ff fb6c 	bl	8000d74 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff fb67 	bl	8000d74 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e127      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b4:	4b96      	ldr	r3, [pc, #600]	; (8001910 <HAL_RCC_OscConfig+0x61c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4013      	ands	r3, r2
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3e2>
 80016c8:	4b90      	ldr	r3, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016cc:	4b8f      	ldr	r3, [pc, #572]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016d4:	e01c      	b.n	8001710 <HAL_RCC_OscConfig+0x41c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x404>
 80016de:	4b8b      	ldr	r3, [pc, #556]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e2:	4b8a      	ldr	r3, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016e4:	2104      	movs	r1, #4
 80016e6:	430a      	orrs	r2, r1
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ea:	4b88      	ldr	r3, [pc, #544]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ee:	4b87      	ldr	r3, [pc, #540]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x41c>
 80016f8:	4b84      	ldr	r3, [pc, #528]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016fc:	4b83      	ldr	r3, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80016fe:	2101      	movs	r1, #1
 8001700:	438a      	bics	r2, r1
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c
 8001704:	4b81      	ldr	r3, [pc, #516]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001708:	4b80      	ldr	r3, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800170a:	2104      	movs	r1, #4
 800170c:	438a      	bics	r2, r1
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fb2c 	bl	8000d74 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001720:	e009      	b.n	8001736 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff fb27 	bl	8000d74 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a79      	ldr	r2, [pc, #484]	; (8001914 <HAL_RCC_OscConfig+0x620>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0e6      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001736:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x42e>
 8001740:	e013      	b.n	800176a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fb17 	bl	8000d74 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800174a:	e009      	b.n	8001760 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff fb12 	bl	8000d74 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a6f      	ldr	r2, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x620>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0d1      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800176a:	231f      	movs	r3, #31
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001778:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800177a:	4967      	ldr	r1, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x624>)
 800177c:	400a      	ands	r2, r1
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x496>
 8001788:	e0bb      	b.n	8001902 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178a:	4b60      	ldr	r3, [pc, #384]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2238      	movs	r2, #56	; 0x38
 8001790:	4013      	ands	r3, r2
 8001792:	2b10      	cmp	r3, #16
 8001794:	d100      	bne.n	8001798 <HAL_RCC_OscConfig+0x4a4>
 8001796:	e07b      	b.n	8001890 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d156      	bne.n	800184e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a0:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80017a6:	495d      	ldr	r1, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x628>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fae2 	bl	8000d74 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fadd 	bl	8000d74 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e09d      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	049b      	lsls	r3, r3, #18
 80017d0:	4013      	ands	r3, r2
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_RCC_OscConfig+0x618>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4a51      	ldr	r2, [pc, #324]	; (8001920 <HAL_RCC_OscConfig+0x62c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	431a      	orrs	r2, r3
 8001802:	4b42      	ldr	r3, [pc, #264]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001804:	430a      	orrs	r2, r1
 8001806:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b40      	ldr	r3, [pc, #256]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	0449      	lsls	r1, r1, #17
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	4b3c      	ldr	r3, [pc, #240]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0549      	lsls	r1, r1, #21
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff faa6 	bl	8000d74 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff faa1 	bl	8000d74 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e061      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	049b      	lsls	r3, r3, #18
 8001848:	4013      	ands	r3, r2
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x53a>
 800184c:	e059      	b.n	8001902 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001854:	4931      	ldr	r1, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fa8b 	bl	8000d74 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fa86 	bl	8000d74 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e046      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049b      	lsls	r3, r3, #18
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_RCC_OscConfig+0x618>)
 8001888:	4926      	ldr	r1, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x630>)
 800188a:	400a      	ands	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e038      	b.n	8001902 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e033      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x618>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2203      	movs	r2, #3
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d126      	bne.n	80018fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2270      	movs	r2, #112	; 0x70
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11f      	bne.n	80018fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	23fe      	movs	r3, #254	; 0xfe
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	23f8      	movs	r3, #248	; 0xf8
 80018d4:	039b      	lsls	r3, r3, #14
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d10e      	bne.n	80018fe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	23e0      	movs	r3, #224	; 0xe0
 80018e4:	051b      	lsls	r3, r3, #20
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	0f5b      	lsrs	r3, r3, #29
 80018f4:	075a      	lsls	r2, r3, #29
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b008      	add	sp, #32
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	40007000 	.word	0x40007000
 8001914:	00001388 	.word	0x00001388
 8001918:	efffffff 	.word	0xefffffff
 800191c:	feffffff 	.word	0xfeffffff
 8001920:	11c1808c 	.word	0x11c1808c
 8001924:	eefefffc 	.word	0xeefefffc

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0e9      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2207      	movs	r2, #7
 8001942:	4013      	ands	r3, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d91e      	bls.n	8001988 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2207      	movs	r2, #7
 8001950:	4393      	bics	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800195c:	f7ff fa0a 	bl	8000d74 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001964:	e009      	b.n	800197a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001966:	f7ff fa05 	bl	8000d74 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a6a      	ldr	r2, [pc, #424]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e0ca      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2207      	movs	r2, #7
 8001980:	4013      	ands	r3, r2
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d015      	beq.n	80019be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2204      	movs	r2, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d006      	beq.n	80019aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	21e0      	movs	r1, #224	; 0xe0
 80019a4:	01c9      	lsls	r1, r1, #7
 80019a6:	430a      	orrs	r2, r1
 80019a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4a5d      	ldr	r2, [pc, #372]	; (8001b24 <HAL_RCC_ClockConfig+0x1fc>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d057      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d12b      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e097      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	049b      	lsls	r3, r3, #18
 80019f0:	4013      	ands	r3, r2
 80019f2:	d11f      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e08b      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d113      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e07f      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e074      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e06d      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a48:	f7ff f994 	bl	8000d74 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a52:	f7ff f98f 	bl	8000d74 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e054      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2238      	movs	r2, #56	; 0x38
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ec      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d21e      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f96c 	bl	8000d74 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa2:	f7ff f967 	bl	8000d74 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e02c      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4013      	ands	r3, r2
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_RCC_ClockConfig+0x200>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ae2:	f000 f829 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001ae6:	0001      	movs	r1, r0
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	220f      	movs	r2, #15
 8001af0:	401a      	ands	r2, r3
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_RCC_ClockConfig+0x204>)
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	58d3      	ldr	r3, [r2, r3]
 8001af8:	221f      	movs	r2, #31
 8001afa:	4013      	ands	r3, r2
 8001afc:	000a      	movs	r2, r1
 8001afe:	40da      	lsrs	r2, r3
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x208>)
 8001b02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x20c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff f8d7 	bl	8000cbc <HAL_InitTick>
 8001b0e:	0003      	movs	r3, r0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffff0ff 	.word	0xfffff0ff
 8001b28:	ffff8fff 	.word	0xffff8fff
 8001b2c:	08002bcc 	.word	0x08002bcc
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2238      	movs	r2, #56	; 0x38
 8001b44:	4013      	ands	r3, r2
 8001b46:	d10f      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0adb      	lsrs	r3, r3, #11
 8001b4e:	2207      	movs	r2, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	0013      	movs	r3, r2
 8001b58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	4835      	ldr	r0, [pc, #212]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b5e:	f7fe fae3 	bl	8000128 <__udivsi3>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e05d      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2238      	movs	r2, #56	; 0x38
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e054      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2238      	movs	r2, #56	; 0x38
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d138      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	2207      	movs	r2, #7
 8001b98:	4013      	ands	r3, r2
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	4824      	ldr	r0, [pc, #144]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ba8:	f7fe fabe 	bl	8000128 <__udivsi3>
 8001bac:	0003      	movs	r3, r0
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	227f      	movs	r2, #127	; 0x7f
 8001bb8:	4013      	ands	r3, r2
 8001bba:	434b      	muls	r3, r1
 8001bbc:	617b      	str	r3, [r7, #20]
        break;
 8001bbe:	e00d      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	481c      	ldr	r0, [pc, #112]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bc4:	f7fe fab0 	bl	8000128 <__udivsi3>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	227f      	movs	r2, #127	; 0x7f
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	434b      	muls	r3, r1
 8001bd8:	617b      	str	r3, [r7, #20]
        break;
 8001bda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0f5b      	lsrs	r3, r3, #29
 8001be2:	2207      	movs	r2, #7
 8001be4:	4013      	ands	r3, r2
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7fe fa9b 	bl	8000128 <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2238      	movs	r2, #56	; 0x38
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d103      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2238      	movs	r2, #56	; 0x38
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b18      	cmp	r3, #24
 8001c16:	d103      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c18:	23fa      	movs	r3, #250	; 0xfa
 8001c1a:	01db      	lsls	r3, r3, #7
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e001      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c24:	693b      	ldr	r3, [r7, #16]
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b006      	add	sp, #24
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40021000 	.word	0x40021000
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e04a      	b.n	8001ce4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	223d      	movs	r2, #61	; 0x3d
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	223c      	movs	r2, #60	; 0x3c
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe ff6d 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	223d      	movs	r2, #61	; 0x3d
 8001c6e:	2102      	movs	r1, #2
 8001c70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f000 f95f 	bl	8001f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2248      	movs	r2, #72	; 0x48
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	223e      	movs	r2, #62	; 0x3e
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2241      	movs	r2, #65	; 0x41
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2242      	movs	r2, #66	; 0x42
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2243      	movs	r2, #67	; 0x43
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2244      	movs	r2, #68	; 0x44
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2245      	movs	r2, #69	; 0x45
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2246      	movs	r2, #70	; 0x46
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2247      	movs	r2, #71	; 0x47
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	223d      	movs	r2, #61	; 0x3d
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	223d      	movs	r2, #61	; 0x3d
 8001cf8:	5c9b      	ldrb	r3, [r3, r2]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e03a      	b.n	8001d7a <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	223d      	movs	r2, #61	; 0x3d
 8001d08:	2102      	movs	r1, #2
 8001d0a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_TIM_Base_Start+0x98>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00f      	beq.n	8001d36 <HAL_TIM_Base_Start+0x4a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	05db      	lsls	r3, r3, #23
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d009      	beq.n	8001d36 <HAL_TIM_Base_Start+0x4a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_TIM_Base_Start+0x9c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_TIM_Base_Start+0x4a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_TIM_Base_Start+0xa0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d116      	bne.n	8001d64 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_TIM_Base_Start+0xa4>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b06      	cmp	r3, #6
 8001d46:	d016      	beq.n	8001d76 <HAL_TIM_Base_Start+0x8a>
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d011      	beq.n	8001d76 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	e008      	b.n	8001d76 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e000      	b.n	8001d78 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40014000 	.word	0x40014000
 8001d90:	00010007 	.word	0x00010007

08001d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	230f      	movs	r3, #15
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	223c      	movs	r2, #60	; 0x3c
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_TIM_ConfigClockSource+0x20>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e0bc      	b.n	8001f2e <HAL_TIM_ConfigClockSource+0x19a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	223c      	movs	r2, #60	; 0x3c
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	223d      	movs	r2, #61	; 0x3d
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4a5a      	ldr	r2, [pc, #360]	; (8001f38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4a59      	ldr	r2, [pc, #356]	; (8001f3c <HAL_TIM_ConfigClockSource+0x1a8>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	0192      	lsls	r2, r2, #6
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d040      	beq.n	8001e72 <HAL_TIM_ConfigClockSource+0xde>
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0192      	lsls	r2, r2, #6
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d900      	bls.n	8001dfa <HAL_TIM_ConfigClockSource+0x66>
 8001df8:	e088      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	0152      	lsls	r2, r2, #5
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d100      	bne.n	8001e04 <HAL_TIM_ConfigClockSource+0x70>
 8001e02:	e088      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0x182>
 8001e04:	2280      	movs	r2, #128	; 0x80
 8001e06:	0152      	lsls	r2, r2, #5
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d900      	bls.n	8001e0e <HAL_TIM_ConfigClockSource+0x7a>
 8001e0c:	e07e      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e0e:	2b70      	cmp	r3, #112	; 0x70
 8001e10:	d018      	beq.n	8001e44 <HAL_TIM_ConfigClockSource+0xb0>
 8001e12:	d900      	bls.n	8001e16 <HAL_TIM_ConfigClockSource+0x82>
 8001e14:	e07a      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e16:	2b60      	cmp	r3, #96	; 0x60
 8001e18:	d04f      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x126>
 8001e1a:	d900      	bls.n	8001e1e <HAL_TIM_ConfigClockSource+0x8a>
 8001e1c:	e076      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e1e:	2b50      	cmp	r3, #80	; 0x50
 8001e20:	d03b      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x106>
 8001e22:	d900      	bls.n	8001e26 <HAL_TIM_ConfigClockSource+0x92>
 8001e24:	e072      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	d057      	beq.n	8001eda <HAL_TIM_ConfigClockSource+0x146>
 8001e2a:	d900      	bls.n	8001e2e <HAL_TIM_ConfigClockSource+0x9a>
 8001e2c:	e06e      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e2e:	2b30      	cmp	r3, #48	; 0x30
 8001e30:	d063      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e32:	d86b      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d060      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e38:	d868      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d05d      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d05b      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e42:	e063      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f000 f970 	bl	8002138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2277      	movs	r2, #119	; 0x77
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]
      break;
 8001e70:	e052      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f000 f959 	bl	8002138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	01c9      	lsls	r1, r1, #7
 8001e94:	430a      	orrs	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
      break;
 8001e98:	e03e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	f000 f8ca 	bl	8002040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2150      	movs	r1, #80	; 0x50
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f924 	bl	8002100 <TIM_ITRx_SetConfig>
      break;
 8001eb8:	e02e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	f000 f8e8 	bl	800209c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2160      	movs	r1, #96	; 0x60
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f914 	bl	8002100 <TIM_ITRx_SetConfig>
      break;
 8001ed8:	e01e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	f000 f8aa 	bl	8002040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f904 	bl	8002100 <TIM_ITRx_SetConfig>
      break;
 8001ef8:	e00e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0019      	movs	r1, r3
 8001f04:	0010      	movs	r0, r2
 8001f06:	f000 f8fb 	bl	8002100 <TIM_ITRx_SetConfig>
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
      break;
 8001f14:	e000      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001f16:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	223d      	movs	r2, #61	; 0x3d
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	223c      	movs	r2, #60	; 0x3c
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

  return status;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	ffceff88 	.word	0xffceff88
 8001f3c:	ffff00ff 	.word	0xffff00ff

08001f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a34      	ldr	r2, [pc, #208]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d008      	beq.n	8001f6a <TIM_Base_SetConfig+0x2a>
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	05db      	lsls	r3, r3, #23
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0x2a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a30      	ldr	r2, [pc, #192]	; (8002028 <TIM_Base_SetConfig+0xe8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2270      	movs	r2, #112	; 0x70
 8001f6e:	4393      	bics	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a29      	ldr	r2, [pc, #164]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d018      	beq.n	8001fb6 <TIM_Base_SetConfig+0x76>
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	05db      	lsls	r3, r3, #23
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d013      	beq.n	8001fb6 <TIM_Base_SetConfig+0x76>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <TIM_Base_SetConfig+0xe8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00f      	beq.n	8001fb6 <TIM_Base_SetConfig+0x76>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <TIM_Base_SetConfig+0xec>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x76>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <TIM_Base_SetConfig+0xf0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_Base_SetConfig+0x76>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a22      	ldr	r2, [pc, #136]	; (8002034 <TIM_Base_SetConfig+0xf4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <TIM_Base_SetConfig+0x76>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a21      	ldr	r2, [pc, #132]	; (8002038 <TIM_Base_SetConfig+0xf8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	; (800203c <TIM_Base_SetConfig+0xfc>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	4393      	bics	r3, r2
 8001fce:	001a      	movs	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00b      	beq.n	800200e <TIM_Base_SetConfig+0xce>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <TIM_Base_SetConfig+0xf0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <TIM_Base_SetConfig+0xce>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <TIM_Base_SetConfig+0xf4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d003      	beq.n	800200e <TIM_Base_SetConfig+0xce>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <TIM_Base_SetConfig+0xf8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d103      	bne.n	8002016 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	615a      	str	r2, [r3, #20]
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b004      	add	sp, #16
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40000400 	.word	0x40000400
 800202c:	40002000 	.word	0x40002000
 8002030:	40014000 	.word	0x40014000
 8002034:	40014400 	.word	0x40014400
 8002038:	40014800 	.word	0x40014800
 800203c:	fffffcff 	.word	0xfffffcff

08002040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2201      	movs	r2, #1
 8002058:	4393      	bics	r3, r2
 800205a:	001a      	movs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	22f0      	movs	r2, #240	; 0xf0
 800206a:	4393      	bics	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	220a      	movs	r2, #10
 800207c:	4393      	bics	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	621a      	str	r2, [r3, #32]
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b006      	add	sp, #24
 800209a:	bd80      	pop	{r7, pc}

0800209c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	2210      	movs	r2, #16
 80020ae:	4393      	bics	r3, r2
 80020b0:	001a      	movs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <TIM_TI2_ConfigInputStage+0x60>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	031b      	lsls	r3, r3, #12
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	22a0      	movs	r2, #160	; 0xa0
 80020d8:	4393      	bics	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	621a      	str	r2, [r3, #32]
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b006      	add	sp, #24
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	ffff0fff 	.word	0xffff0fff

08002100 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <TIM_ITRx_SetConfig+0x34>)
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	2207      	movs	r2, #7
 8002120:	4313      	orrs	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	609a      	str	r2, [r3, #8]
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	ffcfff8f 	.word	0xffcfff8f

08002138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <TIM_ETR_SetConfig+0x3c>)
 8002150:	4013      	ands	r3, r2
 8002152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	021a      	lsls	r2, r3, #8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	431a      	orrs	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	609a      	str	r2, [r3, #8]
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b006      	add	sp, #24
 8002172:	bd80      	pop	{r7, pc}
 8002174:	ffff00ff 	.word	0xffff00ff

08002178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	223c      	movs	r2, #60	; 0x3c
 8002186:	5c9b      	ldrb	r3, [r3, r2]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800218c:	2302      	movs	r3, #2
 800218e:	e055      	b.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	223c      	movs	r2, #60	; 0x3c
 8002194:	2101      	movs	r1, #1
 8002196:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	223d      	movs	r2, #61	; 0x3d
 800219c:	2102      	movs	r1, #2
 800219e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2270      	movs	r2, #112	; 0x70
 80021d0:	4393      	bics	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00f      	beq.n	8002210 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	05db      	lsls	r3, r3, #23
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d009      	beq.n	8002210 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d10c      	bne.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	4393      	bics	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	4313      	orrs	r3, r2
 8002220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223d      	movs	r2, #61	; 0x3d
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	223c      	movs	r2, #60	; 0x3c
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b004      	add	sp, #16
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40012c00 	.word	0x40012c00
 8002248:	ff0fffff 	.word	0xff0fffff
 800224c:	40000400 	.word	0x40000400
 8002250:	40014000 	.word	0x40014000

08002254 <__errno>:
 8002254:	4b01      	ldr	r3, [pc, #4]	; (800225c <__errno+0x8>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	4770      	bx	lr
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	2000000c 	.word	0x2000000c

08002260 <__libc_init_array>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2600      	movs	r6, #0
 8002264:	4d0c      	ldr	r5, [pc, #48]	; (8002298 <__libc_init_array+0x38>)
 8002266:	4c0d      	ldr	r4, [pc, #52]	; (800229c <__libc_init_array+0x3c>)
 8002268:	1b64      	subs	r4, r4, r5
 800226a:	10a4      	asrs	r4, r4, #2
 800226c:	42a6      	cmp	r6, r4
 800226e:	d109      	bne.n	8002284 <__libc_init_array+0x24>
 8002270:	2600      	movs	r6, #0
 8002272:	f000 fc8b 	bl	8002b8c <_init>
 8002276:	4d0a      	ldr	r5, [pc, #40]	; (80022a0 <__libc_init_array+0x40>)
 8002278:	4c0a      	ldr	r4, [pc, #40]	; (80022a4 <__libc_init_array+0x44>)
 800227a:	1b64      	subs	r4, r4, r5
 800227c:	10a4      	asrs	r4, r4, #2
 800227e:	42a6      	cmp	r6, r4
 8002280:	d105      	bne.n	800228e <__libc_init_array+0x2e>
 8002282:	bd70      	pop	{r4, r5, r6, pc}
 8002284:	00b3      	lsls	r3, r6, #2
 8002286:	58eb      	ldr	r3, [r5, r3]
 8002288:	4798      	blx	r3
 800228a:	3601      	adds	r6, #1
 800228c:	e7ee      	b.n	800226c <__libc_init_array+0xc>
 800228e:	00b3      	lsls	r3, r6, #2
 8002290:	58eb      	ldr	r3, [r5, r3]
 8002292:	4798      	blx	r3
 8002294:	3601      	adds	r6, #1
 8002296:	e7f2      	b.n	800227e <__libc_init_array+0x1e>
 8002298:	08002c40 	.word	0x08002c40
 800229c:	08002c40 	.word	0x08002c40
 80022a0:	08002c40 	.word	0x08002c40
 80022a4:	08002c44 	.word	0x08002c44

080022a8 <memset>:
 80022a8:	0003      	movs	r3, r0
 80022aa:	1882      	adds	r2, r0, r2
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d100      	bne.n	80022b2 <memset+0xa>
 80022b0:	4770      	bx	lr
 80022b2:	7019      	strb	r1, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	e7f9      	b.n	80022ac <memset+0x4>

080022b8 <siprintf>:
 80022b8:	b40e      	push	{r1, r2, r3}
 80022ba:	b500      	push	{lr}
 80022bc:	490b      	ldr	r1, [pc, #44]	; (80022ec <siprintf+0x34>)
 80022be:	b09c      	sub	sp, #112	; 0x70
 80022c0:	ab1d      	add	r3, sp, #116	; 0x74
 80022c2:	9002      	str	r0, [sp, #8]
 80022c4:	9006      	str	r0, [sp, #24]
 80022c6:	9107      	str	r1, [sp, #28]
 80022c8:	9104      	str	r1, [sp, #16]
 80022ca:	4809      	ldr	r0, [pc, #36]	; (80022f0 <siprintf+0x38>)
 80022cc:	4909      	ldr	r1, [pc, #36]	; (80022f4 <siprintf+0x3c>)
 80022ce:	cb04      	ldmia	r3!, {r2}
 80022d0:	9105      	str	r1, [sp, #20]
 80022d2:	6800      	ldr	r0, [r0, #0]
 80022d4:	a902      	add	r1, sp, #8
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	f000 f870 	bl	80023bc <_svfiprintf_r>
 80022dc:	2300      	movs	r3, #0
 80022de:	9a02      	ldr	r2, [sp, #8]
 80022e0:	7013      	strb	r3, [r2, #0]
 80022e2:	b01c      	add	sp, #112	; 0x70
 80022e4:	bc08      	pop	{r3}
 80022e6:	b003      	add	sp, #12
 80022e8:	4718      	bx	r3
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	7fffffff 	.word	0x7fffffff
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	ffff0208 	.word	0xffff0208

080022f8 <__ssputs_r>:
 80022f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fa:	688e      	ldr	r6, [r1, #8]
 80022fc:	b085      	sub	sp, #20
 80022fe:	0007      	movs	r7, r0
 8002300:	000c      	movs	r4, r1
 8002302:	9203      	str	r2, [sp, #12]
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	429e      	cmp	r6, r3
 8002308:	d83c      	bhi.n	8002384 <__ssputs_r+0x8c>
 800230a:	2390      	movs	r3, #144	; 0x90
 800230c:	898a      	ldrh	r2, [r1, #12]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	421a      	tst	r2, r3
 8002312:	d034      	beq.n	800237e <__ssputs_r+0x86>
 8002314:	6909      	ldr	r1, [r1, #16]
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	6960      	ldr	r0, [r4, #20]
 800231a:	1a5b      	subs	r3, r3, r1
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	2303      	movs	r3, #3
 8002320:	4343      	muls	r3, r0
 8002322:	0fdd      	lsrs	r5, r3, #31
 8002324:	18ed      	adds	r5, r5, r3
 8002326:	9b01      	ldr	r3, [sp, #4]
 8002328:	9802      	ldr	r0, [sp, #8]
 800232a:	3301      	adds	r3, #1
 800232c:	181b      	adds	r3, r3, r0
 800232e:	106d      	asrs	r5, r5, #1
 8002330:	42ab      	cmp	r3, r5
 8002332:	d900      	bls.n	8002336 <__ssputs_r+0x3e>
 8002334:	001d      	movs	r5, r3
 8002336:	0553      	lsls	r3, r2, #21
 8002338:	d532      	bpl.n	80023a0 <__ssputs_r+0xa8>
 800233a:	0029      	movs	r1, r5
 800233c:	0038      	movs	r0, r7
 800233e:	f000 fb53 	bl	80029e8 <_malloc_r>
 8002342:	1e06      	subs	r6, r0, #0
 8002344:	d109      	bne.n	800235a <__ssputs_r+0x62>
 8002346:	230c      	movs	r3, #12
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	2340      	movs	r3, #64	; 0x40
 800234c:	2001      	movs	r0, #1
 800234e:	89a2      	ldrh	r2, [r4, #12]
 8002350:	4240      	negs	r0, r0
 8002352:	4313      	orrs	r3, r2
 8002354:	81a3      	strh	r3, [r4, #12]
 8002356:	b005      	add	sp, #20
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235a:	9a02      	ldr	r2, [sp, #8]
 800235c:	6921      	ldr	r1, [r4, #16]
 800235e:	f000 faba 	bl	80028d6 <memcpy>
 8002362:	89a3      	ldrh	r3, [r4, #12]
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <__ssputs_r+0xc0>)
 8002366:	401a      	ands	r2, r3
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	4313      	orrs	r3, r2
 800236c:	81a3      	strh	r3, [r4, #12]
 800236e:	9b02      	ldr	r3, [sp, #8]
 8002370:	6126      	str	r6, [r4, #16]
 8002372:	18f6      	adds	r6, r6, r3
 8002374:	6026      	str	r6, [r4, #0]
 8002376:	6165      	str	r5, [r4, #20]
 8002378:	9e01      	ldr	r6, [sp, #4]
 800237a:	1aed      	subs	r5, r5, r3
 800237c:	60a5      	str	r5, [r4, #8]
 800237e:	9b01      	ldr	r3, [sp, #4]
 8002380:	429e      	cmp	r6, r3
 8002382:	d900      	bls.n	8002386 <__ssputs_r+0x8e>
 8002384:	9e01      	ldr	r6, [sp, #4]
 8002386:	0032      	movs	r2, r6
 8002388:	9903      	ldr	r1, [sp, #12]
 800238a:	6820      	ldr	r0, [r4, #0]
 800238c:	f000 faac 	bl	80028e8 <memmove>
 8002390:	68a3      	ldr	r3, [r4, #8]
 8002392:	2000      	movs	r0, #0
 8002394:	1b9b      	subs	r3, r3, r6
 8002396:	60a3      	str	r3, [r4, #8]
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	199e      	adds	r6, r3, r6
 800239c:	6026      	str	r6, [r4, #0]
 800239e:	e7da      	b.n	8002356 <__ssputs_r+0x5e>
 80023a0:	002a      	movs	r2, r5
 80023a2:	0038      	movs	r0, r7
 80023a4:	f000 fb96 	bl	8002ad4 <_realloc_r>
 80023a8:	1e06      	subs	r6, r0, #0
 80023aa:	d1e0      	bne.n	800236e <__ssputs_r+0x76>
 80023ac:	0038      	movs	r0, r7
 80023ae:	6921      	ldr	r1, [r4, #16]
 80023b0:	f000 faae 	bl	8002910 <_free_r>
 80023b4:	e7c7      	b.n	8002346 <__ssputs_r+0x4e>
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	fffffb7f 	.word	0xfffffb7f

080023bc <_svfiprintf_r>:
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	b0a1      	sub	sp, #132	; 0x84
 80023c0:	9003      	str	r0, [sp, #12]
 80023c2:	001d      	movs	r5, r3
 80023c4:	898b      	ldrh	r3, [r1, #12]
 80023c6:	000f      	movs	r7, r1
 80023c8:	0016      	movs	r6, r2
 80023ca:	061b      	lsls	r3, r3, #24
 80023cc:	d511      	bpl.n	80023f2 <_svfiprintf_r+0x36>
 80023ce:	690b      	ldr	r3, [r1, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <_svfiprintf_r+0x36>
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	f000 fb07 	bl	80029e8 <_malloc_r>
 80023da:	6038      	str	r0, [r7, #0]
 80023dc:	6138      	str	r0, [r7, #16]
 80023de:	2800      	cmp	r0, #0
 80023e0:	d105      	bne.n	80023ee <_svfiprintf_r+0x32>
 80023e2:	230c      	movs	r3, #12
 80023e4:	9a03      	ldr	r2, [sp, #12]
 80023e6:	3801      	subs	r0, #1
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	b021      	add	sp, #132	; 0x84
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ee:	2340      	movs	r3, #64	; 0x40
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	2300      	movs	r3, #0
 80023f4:	ac08      	add	r4, sp, #32
 80023f6:	6163      	str	r3, [r4, #20]
 80023f8:	3320      	adds	r3, #32
 80023fa:	7663      	strb	r3, [r4, #25]
 80023fc:	3310      	adds	r3, #16
 80023fe:	76a3      	strb	r3, [r4, #26]
 8002400:	9507      	str	r5, [sp, #28]
 8002402:	0035      	movs	r5, r6
 8002404:	782b      	ldrb	r3, [r5, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <_svfiprintf_r+0x52>
 800240a:	2b25      	cmp	r3, #37	; 0x25
 800240c:	d147      	bne.n	800249e <_svfiprintf_r+0xe2>
 800240e:	1bab      	subs	r3, r5, r6
 8002410:	9305      	str	r3, [sp, #20]
 8002412:	42b5      	cmp	r5, r6
 8002414:	d00c      	beq.n	8002430 <_svfiprintf_r+0x74>
 8002416:	0032      	movs	r2, r6
 8002418:	0039      	movs	r1, r7
 800241a:	9803      	ldr	r0, [sp, #12]
 800241c:	f7ff ff6c 	bl	80022f8 <__ssputs_r>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	d100      	bne.n	8002426 <_svfiprintf_r+0x6a>
 8002424:	e0ae      	b.n	8002584 <_svfiprintf_r+0x1c8>
 8002426:	6962      	ldr	r2, [r4, #20]
 8002428:	9b05      	ldr	r3, [sp, #20]
 800242a:	4694      	mov	ip, r2
 800242c:	4463      	add	r3, ip
 800242e:	6163      	str	r3, [r4, #20]
 8002430:	782b      	ldrb	r3, [r5, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d100      	bne.n	8002438 <_svfiprintf_r+0x7c>
 8002436:	e0a5      	b.n	8002584 <_svfiprintf_r+0x1c8>
 8002438:	2201      	movs	r2, #1
 800243a:	2300      	movs	r3, #0
 800243c:	4252      	negs	r2, r2
 800243e:	6062      	str	r2, [r4, #4]
 8002440:	a904      	add	r1, sp, #16
 8002442:	3254      	adds	r2, #84	; 0x54
 8002444:	1852      	adds	r2, r2, r1
 8002446:	1c6e      	adds	r6, r5, #1
 8002448:	6023      	str	r3, [r4, #0]
 800244a:	60e3      	str	r3, [r4, #12]
 800244c:	60a3      	str	r3, [r4, #8]
 800244e:	7013      	strb	r3, [r2, #0]
 8002450:	65a3      	str	r3, [r4, #88]	; 0x58
 8002452:	2205      	movs	r2, #5
 8002454:	7831      	ldrb	r1, [r6, #0]
 8002456:	4854      	ldr	r0, [pc, #336]	; (80025a8 <_svfiprintf_r+0x1ec>)
 8002458:	f000 fa32 	bl	80028c0 <memchr>
 800245c:	1c75      	adds	r5, r6, #1
 800245e:	2800      	cmp	r0, #0
 8002460:	d11f      	bne.n	80024a2 <_svfiprintf_r+0xe6>
 8002462:	6822      	ldr	r2, [r4, #0]
 8002464:	06d3      	lsls	r3, r2, #27
 8002466:	d504      	bpl.n	8002472 <_svfiprintf_r+0xb6>
 8002468:	2353      	movs	r3, #83	; 0x53
 800246a:	a904      	add	r1, sp, #16
 800246c:	185b      	adds	r3, r3, r1
 800246e:	2120      	movs	r1, #32
 8002470:	7019      	strb	r1, [r3, #0]
 8002472:	0713      	lsls	r3, r2, #28
 8002474:	d504      	bpl.n	8002480 <_svfiprintf_r+0xc4>
 8002476:	2353      	movs	r3, #83	; 0x53
 8002478:	a904      	add	r1, sp, #16
 800247a:	185b      	adds	r3, r3, r1
 800247c:	212b      	movs	r1, #43	; 0x2b
 800247e:	7019      	strb	r1, [r3, #0]
 8002480:	7833      	ldrb	r3, [r6, #0]
 8002482:	2b2a      	cmp	r3, #42	; 0x2a
 8002484:	d016      	beq.n	80024b4 <_svfiprintf_r+0xf8>
 8002486:	0035      	movs	r5, r6
 8002488:	2100      	movs	r1, #0
 800248a:	200a      	movs	r0, #10
 800248c:	68e3      	ldr	r3, [r4, #12]
 800248e:	782a      	ldrb	r2, [r5, #0]
 8002490:	1c6e      	adds	r6, r5, #1
 8002492:	3a30      	subs	r2, #48	; 0x30
 8002494:	2a09      	cmp	r2, #9
 8002496:	d94e      	bls.n	8002536 <_svfiprintf_r+0x17a>
 8002498:	2900      	cmp	r1, #0
 800249a:	d111      	bne.n	80024c0 <_svfiprintf_r+0x104>
 800249c:	e017      	b.n	80024ce <_svfiprintf_r+0x112>
 800249e:	3501      	adds	r5, #1
 80024a0:	e7b0      	b.n	8002404 <_svfiprintf_r+0x48>
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <_svfiprintf_r+0x1ec>)
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	1ac0      	subs	r0, r0, r3
 80024a8:	2301      	movs	r3, #1
 80024aa:	4083      	lsls	r3, r0
 80024ac:	4313      	orrs	r3, r2
 80024ae:	002e      	movs	r6, r5
 80024b0:	6023      	str	r3, [r4, #0]
 80024b2:	e7ce      	b.n	8002452 <_svfiprintf_r+0x96>
 80024b4:	9b07      	ldr	r3, [sp, #28]
 80024b6:	1d19      	adds	r1, r3, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	9107      	str	r1, [sp, #28]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db01      	blt.n	80024c4 <_svfiprintf_r+0x108>
 80024c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80024c2:	e004      	b.n	80024ce <_svfiprintf_r+0x112>
 80024c4:	425b      	negs	r3, r3
 80024c6:	60e3      	str	r3, [r4, #12]
 80024c8:	2302      	movs	r3, #2
 80024ca:	4313      	orrs	r3, r2
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	782b      	ldrb	r3, [r5, #0]
 80024d0:	2b2e      	cmp	r3, #46	; 0x2e
 80024d2:	d10a      	bne.n	80024ea <_svfiprintf_r+0x12e>
 80024d4:	786b      	ldrb	r3, [r5, #1]
 80024d6:	2b2a      	cmp	r3, #42	; 0x2a
 80024d8:	d135      	bne.n	8002546 <_svfiprintf_r+0x18a>
 80024da:	9b07      	ldr	r3, [sp, #28]
 80024dc:	3502      	adds	r5, #2
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	9207      	str	r2, [sp, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db2b      	blt.n	8002540 <_svfiprintf_r+0x184>
 80024e8:	9309      	str	r3, [sp, #36]	; 0x24
 80024ea:	4e30      	ldr	r6, [pc, #192]	; (80025ac <_svfiprintf_r+0x1f0>)
 80024ec:	2203      	movs	r2, #3
 80024ee:	0030      	movs	r0, r6
 80024f0:	7829      	ldrb	r1, [r5, #0]
 80024f2:	f000 f9e5 	bl	80028c0 <memchr>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d006      	beq.n	8002508 <_svfiprintf_r+0x14c>
 80024fa:	2340      	movs	r3, #64	; 0x40
 80024fc:	1b80      	subs	r0, r0, r6
 80024fe:	4083      	lsls	r3, r0
 8002500:	6822      	ldr	r2, [r4, #0]
 8002502:	3501      	adds	r5, #1
 8002504:	4313      	orrs	r3, r2
 8002506:	6023      	str	r3, [r4, #0]
 8002508:	7829      	ldrb	r1, [r5, #0]
 800250a:	2206      	movs	r2, #6
 800250c:	4828      	ldr	r0, [pc, #160]	; (80025b0 <_svfiprintf_r+0x1f4>)
 800250e:	1c6e      	adds	r6, r5, #1
 8002510:	7621      	strb	r1, [r4, #24]
 8002512:	f000 f9d5 	bl	80028c0 <memchr>
 8002516:	2800      	cmp	r0, #0
 8002518:	d03c      	beq.n	8002594 <_svfiprintf_r+0x1d8>
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <_svfiprintf_r+0x1f8>)
 800251c:	2b00      	cmp	r3, #0
 800251e:	d125      	bne.n	800256c <_svfiprintf_r+0x1b0>
 8002520:	2207      	movs	r2, #7
 8002522:	9b07      	ldr	r3, [sp, #28]
 8002524:	3307      	adds	r3, #7
 8002526:	4393      	bics	r3, r2
 8002528:	3308      	adds	r3, #8
 800252a:	9307      	str	r3, [sp, #28]
 800252c:	6963      	ldr	r3, [r4, #20]
 800252e:	9a04      	ldr	r2, [sp, #16]
 8002530:	189b      	adds	r3, r3, r2
 8002532:	6163      	str	r3, [r4, #20]
 8002534:	e765      	b.n	8002402 <_svfiprintf_r+0x46>
 8002536:	4343      	muls	r3, r0
 8002538:	0035      	movs	r5, r6
 800253a:	2101      	movs	r1, #1
 800253c:	189b      	adds	r3, r3, r2
 800253e:	e7a6      	b.n	800248e <_svfiprintf_r+0xd2>
 8002540:	2301      	movs	r3, #1
 8002542:	425b      	negs	r3, r3
 8002544:	e7d0      	b.n	80024e8 <_svfiprintf_r+0x12c>
 8002546:	2300      	movs	r3, #0
 8002548:	200a      	movs	r0, #10
 800254a:	001a      	movs	r2, r3
 800254c:	3501      	adds	r5, #1
 800254e:	6063      	str	r3, [r4, #4]
 8002550:	7829      	ldrb	r1, [r5, #0]
 8002552:	1c6e      	adds	r6, r5, #1
 8002554:	3930      	subs	r1, #48	; 0x30
 8002556:	2909      	cmp	r1, #9
 8002558:	d903      	bls.n	8002562 <_svfiprintf_r+0x1a6>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0c5      	beq.n	80024ea <_svfiprintf_r+0x12e>
 800255e:	9209      	str	r2, [sp, #36]	; 0x24
 8002560:	e7c3      	b.n	80024ea <_svfiprintf_r+0x12e>
 8002562:	4342      	muls	r2, r0
 8002564:	0035      	movs	r5, r6
 8002566:	2301      	movs	r3, #1
 8002568:	1852      	adds	r2, r2, r1
 800256a:	e7f1      	b.n	8002550 <_svfiprintf_r+0x194>
 800256c:	ab07      	add	r3, sp, #28
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	003a      	movs	r2, r7
 8002572:	0021      	movs	r1, r4
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_svfiprintf_r+0x1fc>)
 8002576:	9803      	ldr	r0, [sp, #12]
 8002578:	e000      	b.n	800257c <_svfiprintf_r+0x1c0>
 800257a:	bf00      	nop
 800257c:	9004      	str	r0, [sp, #16]
 800257e:	9b04      	ldr	r3, [sp, #16]
 8002580:	3301      	adds	r3, #1
 8002582:	d1d3      	bne.n	800252c <_svfiprintf_r+0x170>
 8002584:	89bb      	ldrh	r3, [r7, #12]
 8002586:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002588:	065b      	lsls	r3, r3, #25
 800258a:	d400      	bmi.n	800258e <_svfiprintf_r+0x1d2>
 800258c:	e72d      	b.n	80023ea <_svfiprintf_r+0x2e>
 800258e:	2001      	movs	r0, #1
 8002590:	4240      	negs	r0, r0
 8002592:	e72a      	b.n	80023ea <_svfiprintf_r+0x2e>
 8002594:	ab07      	add	r3, sp, #28
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	003a      	movs	r2, r7
 800259a:	0021      	movs	r1, r4
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <_svfiprintf_r+0x1fc>)
 800259e:	9803      	ldr	r0, [sp, #12]
 80025a0:	f000 f87c 	bl	800269c <_printf_i>
 80025a4:	e7ea      	b.n	800257c <_svfiprintf_r+0x1c0>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	08002c0c 	.word	0x08002c0c
 80025ac:	08002c12 	.word	0x08002c12
 80025b0:	08002c16 	.word	0x08002c16
 80025b4:	00000000 	.word	0x00000000
 80025b8:	080022f9 	.word	0x080022f9

080025bc <_printf_common>:
 80025bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025be:	0015      	movs	r5, r2
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	688a      	ldr	r2, [r1, #8]
 80025c4:	690b      	ldr	r3, [r1, #16]
 80025c6:	000c      	movs	r4, r1
 80025c8:	9000      	str	r0, [sp, #0]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	da00      	bge.n	80025d0 <_printf_common+0x14>
 80025ce:	0013      	movs	r3, r2
 80025d0:	0022      	movs	r2, r4
 80025d2:	602b      	str	r3, [r5, #0]
 80025d4:	3243      	adds	r2, #67	; 0x43
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d001      	beq.n	80025e0 <_printf_common+0x24>
 80025dc:	3301      	adds	r3, #1
 80025de:	602b      	str	r3, [r5, #0]
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	069b      	lsls	r3, r3, #26
 80025e4:	d502      	bpl.n	80025ec <_printf_common+0x30>
 80025e6:	682b      	ldr	r3, [r5, #0]
 80025e8:	3302      	adds	r3, #2
 80025ea:	602b      	str	r3, [r5, #0]
 80025ec:	6822      	ldr	r2, [r4, #0]
 80025ee:	2306      	movs	r3, #6
 80025f0:	0017      	movs	r7, r2
 80025f2:	401f      	ands	r7, r3
 80025f4:	421a      	tst	r2, r3
 80025f6:	d027      	beq.n	8002648 <_printf_common+0x8c>
 80025f8:	0023      	movs	r3, r4
 80025fa:	3343      	adds	r3, #67	; 0x43
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	1e5a      	subs	r2, r3, #1
 8002600:	4193      	sbcs	r3, r2
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	0692      	lsls	r2, r2, #26
 8002606:	d430      	bmi.n	800266a <_printf_common+0xae>
 8002608:	0022      	movs	r2, r4
 800260a:	9901      	ldr	r1, [sp, #4]
 800260c:	9800      	ldr	r0, [sp, #0]
 800260e:	9e08      	ldr	r6, [sp, #32]
 8002610:	3243      	adds	r2, #67	; 0x43
 8002612:	47b0      	blx	r6
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d025      	beq.n	8002664 <_printf_common+0xa8>
 8002618:	2306      	movs	r3, #6
 800261a:	6820      	ldr	r0, [r4, #0]
 800261c:	682a      	ldr	r2, [r5, #0]
 800261e:	68e1      	ldr	r1, [r4, #12]
 8002620:	2500      	movs	r5, #0
 8002622:	4003      	ands	r3, r0
 8002624:	2b04      	cmp	r3, #4
 8002626:	d103      	bne.n	8002630 <_printf_common+0x74>
 8002628:	1a8d      	subs	r5, r1, r2
 800262a:	43eb      	mvns	r3, r5
 800262c:	17db      	asrs	r3, r3, #31
 800262e:	401d      	ands	r5, r3
 8002630:	68a3      	ldr	r3, [r4, #8]
 8002632:	6922      	ldr	r2, [r4, #16]
 8002634:	4293      	cmp	r3, r2
 8002636:	dd01      	ble.n	800263c <_printf_common+0x80>
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	18ed      	adds	r5, r5, r3
 800263c:	2700      	movs	r7, #0
 800263e:	42bd      	cmp	r5, r7
 8002640:	d120      	bne.n	8002684 <_printf_common+0xc8>
 8002642:	2000      	movs	r0, #0
 8002644:	e010      	b.n	8002668 <_printf_common+0xac>
 8002646:	3701      	adds	r7, #1
 8002648:	68e3      	ldr	r3, [r4, #12]
 800264a:	682a      	ldr	r2, [r5, #0]
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	42bb      	cmp	r3, r7
 8002650:	ddd2      	ble.n	80025f8 <_printf_common+0x3c>
 8002652:	0022      	movs	r2, r4
 8002654:	2301      	movs	r3, #1
 8002656:	9901      	ldr	r1, [sp, #4]
 8002658:	9800      	ldr	r0, [sp, #0]
 800265a:	9e08      	ldr	r6, [sp, #32]
 800265c:	3219      	adds	r2, #25
 800265e:	47b0      	blx	r6
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d1f0      	bne.n	8002646 <_printf_common+0x8a>
 8002664:	2001      	movs	r0, #1
 8002666:	4240      	negs	r0, r0
 8002668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800266a:	2030      	movs	r0, #48	; 0x30
 800266c:	18e1      	adds	r1, r4, r3
 800266e:	3143      	adds	r1, #67	; 0x43
 8002670:	7008      	strb	r0, [r1, #0]
 8002672:	0021      	movs	r1, r4
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	3145      	adds	r1, #69	; 0x45
 8002678:	7809      	ldrb	r1, [r1, #0]
 800267a:	18a2      	adds	r2, r4, r2
 800267c:	3243      	adds	r2, #67	; 0x43
 800267e:	3302      	adds	r3, #2
 8002680:	7011      	strb	r1, [r2, #0]
 8002682:	e7c1      	b.n	8002608 <_printf_common+0x4c>
 8002684:	0022      	movs	r2, r4
 8002686:	2301      	movs	r3, #1
 8002688:	9901      	ldr	r1, [sp, #4]
 800268a:	9800      	ldr	r0, [sp, #0]
 800268c:	9e08      	ldr	r6, [sp, #32]
 800268e:	321a      	adds	r2, #26
 8002690:	47b0      	blx	r6
 8002692:	1c43      	adds	r3, r0, #1
 8002694:	d0e6      	beq.n	8002664 <_printf_common+0xa8>
 8002696:	3701      	adds	r7, #1
 8002698:	e7d1      	b.n	800263e <_printf_common+0x82>
	...

0800269c <_printf_i>:
 800269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269e:	b08b      	sub	sp, #44	; 0x2c
 80026a0:	9206      	str	r2, [sp, #24]
 80026a2:	000a      	movs	r2, r1
 80026a4:	3243      	adds	r2, #67	; 0x43
 80026a6:	9307      	str	r3, [sp, #28]
 80026a8:	9005      	str	r0, [sp, #20]
 80026aa:	9204      	str	r2, [sp, #16]
 80026ac:	7e0a      	ldrb	r2, [r1, #24]
 80026ae:	000c      	movs	r4, r1
 80026b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80026b2:	2a78      	cmp	r2, #120	; 0x78
 80026b4:	d807      	bhi.n	80026c6 <_printf_i+0x2a>
 80026b6:	2a62      	cmp	r2, #98	; 0x62
 80026b8:	d809      	bhi.n	80026ce <_printf_i+0x32>
 80026ba:	2a00      	cmp	r2, #0
 80026bc:	d100      	bne.n	80026c0 <_printf_i+0x24>
 80026be:	e0c1      	b.n	8002844 <_printf_i+0x1a8>
 80026c0:	2a58      	cmp	r2, #88	; 0x58
 80026c2:	d100      	bne.n	80026c6 <_printf_i+0x2a>
 80026c4:	e08c      	b.n	80027e0 <_printf_i+0x144>
 80026c6:	0026      	movs	r6, r4
 80026c8:	3642      	adds	r6, #66	; 0x42
 80026ca:	7032      	strb	r2, [r6, #0]
 80026cc:	e022      	b.n	8002714 <_printf_i+0x78>
 80026ce:	0010      	movs	r0, r2
 80026d0:	3863      	subs	r0, #99	; 0x63
 80026d2:	2815      	cmp	r0, #21
 80026d4:	d8f7      	bhi.n	80026c6 <_printf_i+0x2a>
 80026d6:	f7fd fd1d 	bl	8000114 <__gnu_thumb1_case_shi>
 80026da:	0016      	.short	0x0016
 80026dc:	fff6001f 	.word	0xfff6001f
 80026e0:	fff6fff6 	.word	0xfff6fff6
 80026e4:	001ffff6 	.word	0x001ffff6
 80026e8:	fff6fff6 	.word	0xfff6fff6
 80026ec:	fff6fff6 	.word	0xfff6fff6
 80026f0:	003600a8 	.word	0x003600a8
 80026f4:	fff6009a 	.word	0xfff6009a
 80026f8:	00b9fff6 	.word	0x00b9fff6
 80026fc:	0036fff6 	.word	0x0036fff6
 8002700:	fff6fff6 	.word	0xfff6fff6
 8002704:	009e      	.short	0x009e
 8002706:	0026      	movs	r6, r4
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	3642      	adds	r6, #66	; 0x42
 800270c:	1d11      	adds	r1, r2, #4
 800270e:	6019      	str	r1, [r3, #0]
 8002710:	6813      	ldr	r3, [r2, #0]
 8002712:	7033      	strb	r3, [r6, #0]
 8002714:	2301      	movs	r3, #1
 8002716:	e0a7      	b.n	8002868 <_printf_i+0x1cc>
 8002718:	6808      	ldr	r0, [r1, #0]
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	1d0a      	adds	r2, r1, #4
 800271e:	0605      	lsls	r5, r0, #24
 8002720:	d50b      	bpl.n	800273a <_printf_i+0x9e>
 8002722:	680d      	ldr	r5, [r1, #0]
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	2d00      	cmp	r5, #0
 8002728:	da03      	bge.n	8002732 <_printf_i+0x96>
 800272a:	232d      	movs	r3, #45	; 0x2d
 800272c:	9a04      	ldr	r2, [sp, #16]
 800272e:	426d      	negs	r5, r5
 8002730:	7013      	strb	r3, [r2, #0]
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <_printf_i+0x21c>)
 8002734:	270a      	movs	r7, #10
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	e01b      	b.n	8002772 <_printf_i+0xd6>
 800273a:	680d      	ldr	r5, [r1, #0]
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	0641      	lsls	r1, r0, #25
 8002740:	d5f1      	bpl.n	8002726 <_printf_i+0x8a>
 8002742:	b22d      	sxth	r5, r5
 8002744:	e7ef      	b.n	8002726 <_printf_i+0x8a>
 8002746:	680d      	ldr	r5, [r1, #0]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	1d08      	adds	r0, r1, #4
 800274c:	6018      	str	r0, [r3, #0]
 800274e:	062e      	lsls	r6, r5, #24
 8002750:	d501      	bpl.n	8002756 <_printf_i+0xba>
 8002752:	680d      	ldr	r5, [r1, #0]
 8002754:	e003      	b.n	800275e <_printf_i+0xc2>
 8002756:	066d      	lsls	r5, r5, #25
 8002758:	d5fb      	bpl.n	8002752 <_printf_i+0xb6>
 800275a:	680d      	ldr	r5, [r1, #0]
 800275c:	b2ad      	uxth	r5, r5
 800275e:	4b56      	ldr	r3, [pc, #344]	; (80028b8 <_printf_i+0x21c>)
 8002760:	2708      	movs	r7, #8
 8002762:	9303      	str	r3, [sp, #12]
 8002764:	2a6f      	cmp	r2, #111	; 0x6f
 8002766:	d000      	beq.n	800276a <_printf_i+0xce>
 8002768:	3702      	adds	r7, #2
 800276a:	0023      	movs	r3, r4
 800276c:	2200      	movs	r2, #0
 800276e:	3343      	adds	r3, #67	; 0x43
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	6863      	ldr	r3, [r4, #4]
 8002774:	60a3      	str	r3, [r4, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db03      	blt.n	8002782 <_printf_i+0xe6>
 800277a:	2204      	movs	r2, #4
 800277c:	6821      	ldr	r1, [r4, #0]
 800277e:	4391      	bics	r1, r2
 8002780:	6021      	str	r1, [r4, #0]
 8002782:	2d00      	cmp	r5, #0
 8002784:	d102      	bne.n	800278c <_printf_i+0xf0>
 8002786:	9e04      	ldr	r6, [sp, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <_printf_i+0x10a>
 800278c:	9e04      	ldr	r6, [sp, #16]
 800278e:	0028      	movs	r0, r5
 8002790:	0039      	movs	r1, r7
 8002792:	f7fd fd4f 	bl	8000234 <__aeabi_uidivmod>
 8002796:	9b03      	ldr	r3, [sp, #12]
 8002798:	3e01      	subs	r6, #1
 800279a:	5c5b      	ldrb	r3, [r3, r1]
 800279c:	7033      	strb	r3, [r6, #0]
 800279e:	002b      	movs	r3, r5
 80027a0:	0005      	movs	r5, r0
 80027a2:	429f      	cmp	r7, r3
 80027a4:	d9f3      	bls.n	800278e <_printf_i+0xf2>
 80027a6:	2f08      	cmp	r7, #8
 80027a8:	d109      	bne.n	80027be <_printf_i+0x122>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	07db      	lsls	r3, r3, #31
 80027ae:	d506      	bpl.n	80027be <_printf_i+0x122>
 80027b0:	6863      	ldr	r3, [r4, #4]
 80027b2:	6922      	ldr	r2, [r4, #16]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	dc02      	bgt.n	80027be <_printf_i+0x122>
 80027b8:	2330      	movs	r3, #48	; 0x30
 80027ba:	3e01      	subs	r6, #1
 80027bc:	7033      	strb	r3, [r6, #0]
 80027be:	9b04      	ldr	r3, [sp, #16]
 80027c0:	1b9b      	subs	r3, r3, r6
 80027c2:	6123      	str	r3, [r4, #16]
 80027c4:	9b07      	ldr	r3, [sp, #28]
 80027c6:	0021      	movs	r1, r4
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	9805      	ldr	r0, [sp, #20]
 80027cc:	9b06      	ldr	r3, [sp, #24]
 80027ce:	aa09      	add	r2, sp, #36	; 0x24
 80027d0:	f7ff fef4 	bl	80025bc <_printf_common>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d14c      	bne.n	8002872 <_printf_i+0x1d6>
 80027d8:	2001      	movs	r0, #1
 80027da:	4240      	negs	r0, r0
 80027dc:	b00b      	add	sp, #44	; 0x2c
 80027de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e0:	3145      	adds	r1, #69	; 0x45
 80027e2:	700a      	strb	r2, [r1, #0]
 80027e4:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <_printf_i+0x21c>)
 80027e6:	9203      	str	r2, [sp, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	6821      	ldr	r1, [r4, #0]
 80027ec:	ca20      	ldmia	r2!, {r5}
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	0608      	lsls	r0, r1, #24
 80027f2:	d516      	bpl.n	8002822 <_printf_i+0x186>
 80027f4:	07cb      	lsls	r3, r1, #31
 80027f6:	d502      	bpl.n	80027fe <_printf_i+0x162>
 80027f8:	2320      	movs	r3, #32
 80027fa:	4319      	orrs	r1, r3
 80027fc:	6021      	str	r1, [r4, #0]
 80027fe:	2710      	movs	r7, #16
 8002800:	2d00      	cmp	r5, #0
 8002802:	d1b2      	bne.n	800276a <_printf_i+0xce>
 8002804:	2320      	movs	r3, #32
 8002806:	6822      	ldr	r2, [r4, #0]
 8002808:	439a      	bics	r2, r3
 800280a:	6022      	str	r2, [r4, #0]
 800280c:	e7ad      	b.n	800276a <_printf_i+0xce>
 800280e:	2220      	movs	r2, #32
 8002810:	6809      	ldr	r1, [r1, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	6022      	str	r2, [r4, #0]
 8002816:	0022      	movs	r2, r4
 8002818:	2178      	movs	r1, #120	; 0x78
 800281a:	3245      	adds	r2, #69	; 0x45
 800281c:	7011      	strb	r1, [r2, #0]
 800281e:	4a27      	ldr	r2, [pc, #156]	; (80028bc <_printf_i+0x220>)
 8002820:	e7e1      	b.n	80027e6 <_printf_i+0x14a>
 8002822:	0648      	lsls	r0, r1, #25
 8002824:	d5e6      	bpl.n	80027f4 <_printf_i+0x158>
 8002826:	b2ad      	uxth	r5, r5
 8002828:	e7e4      	b.n	80027f4 <_printf_i+0x158>
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	680d      	ldr	r5, [r1, #0]
 800282e:	1d10      	adds	r0, r2, #4
 8002830:	6949      	ldr	r1, [r1, #20]
 8002832:	6018      	str	r0, [r3, #0]
 8002834:	6813      	ldr	r3, [r2, #0]
 8002836:	062e      	lsls	r6, r5, #24
 8002838:	d501      	bpl.n	800283e <_printf_i+0x1a2>
 800283a:	6019      	str	r1, [r3, #0]
 800283c:	e002      	b.n	8002844 <_printf_i+0x1a8>
 800283e:	066d      	lsls	r5, r5, #25
 8002840:	d5fb      	bpl.n	800283a <_printf_i+0x19e>
 8002842:	8019      	strh	r1, [r3, #0]
 8002844:	2300      	movs	r3, #0
 8002846:	9e04      	ldr	r6, [sp, #16]
 8002848:	6123      	str	r3, [r4, #16]
 800284a:	e7bb      	b.n	80027c4 <_printf_i+0x128>
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	1d11      	adds	r1, r2, #4
 8002850:	6019      	str	r1, [r3, #0]
 8002852:	6816      	ldr	r6, [r2, #0]
 8002854:	2100      	movs	r1, #0
 8002856:	0030      	movs	r0, r6
 8002858:	6862      	ldr	r2, [r4, #4]
 800285a:	f000 f831 	bl	80028c0 <memchr>
 800285e:	2800      	cmp	r0, #0
 8002860:	d001      	beq.n	8002866 <_printf_i+0x1ca>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	6060      	str	r0, [r4, #4]
 8002866:	6863      	ldr	r3, [r4, #4]
 8002868:	6123      	str	r3, [r4, #16]
 800286a:	2300      	movs	r3, #0
 800286c:	9a04      	ldr	r2, [sp, #16]
 800286e:	7013      	strb	r3, [r2, #0]
 8002870:	e7a8      	b.n	80027c4 <_printf_i+0x128>
 8002872:	6923      	ldr	r3, [r4, #16]
 8002874:	0032      	movs	r2, r6
 8002876:	9906      	ldr	r1, [sp, #24]
 8002878:	9805      	ldr	r0, [sp, #20]
 800287a:	9d07      	ldr	r5, [sp, #28]
 800287c:	47a8      	blx	r5
 800287e:	1c43      	adds	r3, r0, #1
 8002880:	d0aa      	beq.n	80027d8 <_printf_i+0x13c>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	079b      	lsls	r3, r3, #30
 8002886:	d415      	bmi.n	80028b4 <_printf_i+0x218>
 8002888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800288a:	68e0      	ldr	r0, [r4, #12]
 800288c:	4298      	cmp	r0, r3
 800288e:	daa5      	bge.n	80027dc <_printf_i+0x140>
 8002890:	0018      	movs	r0, r3
 8002892:	e7a3      	b.n	80027dc <_printf_i+0x140>
 8002894:	0022      	movs	r2, r4
 8002896:	2301      	movs	r3, #1
 8002898:	9906      	ldr	r1, [sp, #24]
 800289a:	9805      	ldr	r0, [sp, #20]
 800289c:	9e07      	ldr	r6, [sp, #28]
 800289e:	3219      	adds	r2, #25
 80028a0:	47b0      	blx	r6
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	d098      	beq.n	80027d8 <_printf_i+0x13c>
 80028a6:	3501      	adds	r5, #1
 80028a8:	68e3      	ldr	r3, [r4, #12]
 80028aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	42ab      	cmp	r3, r5
 80028b0:	dcf0      	bgt.n	8002894 <_printf_i+0x1f8>
 80028b2:	e7e9      	b.n	8002888 <_printf_i+0x1ec>
 80028b4:	2500      	movs	r5, #0
 80028b6:	e7f7      	b.n	80028a8 <_printf_i+0x20c>
 80028b8:	08002c1d 	.word	0x08002c1d
 80028bc:	08002c2e 	.word	0x08002c2e

080028c0 <memchr>:
 80028c0:	b2c9      	uxtb	r1, r1
 80028c2:	1882      	adds	r2, r0, r2
 80028c4:	4290      	cmp	r0, r2
 80028c6:	d101      	bne.n	80028cc <memchr+0xc>
 80028c8:	2000      	movs	r0, #0
 80028ca:	4770      	bx	lr
 80028cc:	7803      	ldrb	r3, [r0, #0]
 80028ce:	428b      	cmp	r3, r1
 80028d0:	d0fb      	beq.n	80028ca <memchr+0xa>
 80028d2:	3001      	adds	r0, #1
 80028d4:	e7f6      	b.n	80028c4 <memchr+0x4>

080028d6 <memcpy>:
 80028d6:	2300      	movs	r3, #0
 80028d8:	b510      	push	{r4, lr}
 80028da:	429a      	cmp	r2, r3
 80028dc:	d100      	bne.n	80028e0 <memcpy+0xa>
 80028de:	bd10      	pop	{r4, pc}
 80028e0:	5ccc      	ldrb	r4, [r1, r3]
 80028e2:	54c4      	strb	r4, [r0, r3]
 80028e4:	3301      	adds	r3, #1
 80028e6:	e7f8      	b.n	80028da <memcpy+0x4>

080028e8 <memmove>:
 80028e8:	b510      	push	{r4, lr}
 80028ea:	4288      	cmp	r0, r1
 80028ec:	d902      	bls.n	80028f4 <memmove+0xc>
 80028ee:	188b      	adds	r3, r1, r2
 80028f0:	4298      	cmp	r0, r3
 80028f2:	d303      	bcc.n	80028fc <memmove+0x14>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e007      	b.n	8002908 <memmove+0x20>
 80028f8:	5c8b      	ldrb	r3, [r1, r2]
 80028fa:	5483      	strb	r3, [r0, r2]
 80028fc:	3a01      	subs	r2, #1
 80028fe:	d2fb      	bcs.n	80028f8 <memmove+0x10>
 8002900:	bd10      	pop	{r4, pc}
 8002902:	5ccc      	ldrb	r4, [r1, r3]
 8002904:	54c4      	strb	r4, [r0, r3]
 8002906:	3301      	adds	r3, #1
 8002908:	429a      	cmp	r2, r3
 800290a:	d1fa      	bne.n	8002902 <memmove+0x1a>
 800290c:	e7f8      	b.n	8002900 <memmove+0x18>
	...

08002910 <_free_r>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	0005      	movs	r5, r0
 8002914:	2900      	cmp	r1, #0
 8002916:	d010      	beq.n	800293a <_free_r+0x2a>
 8002918:	1f0c      	subs	r4, r1, #4
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	da00      	bge.n	8002922 <_free_r+0x12>
 8002920:	18e4      	adds	r4, r4, r3
 8002922:	0028      	movs	r0, r5
 8002924:	f000 f918 	bl	8002b58 <__malloc_lock>
 8002928:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <_free_r+0x90>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <_free_r+0x2c>
 8002930:	6063      	str	r3, [r4, #4]
 8002932:	6014      	str	r4, [r2, #0]
 8002934:	0028      	movs	r0, r5
 8002936:	f000 f917 	bl	8002b68 <__malloc_unlock>
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	42a3      	cmp	r3, r4
 800293e:	d908      	bls.n	8002952 <_free_r+0x42>
 8002940:	6821      	ldr	r1, [r4, #0]
 8002942:	1860      	adds	r0, r4, r1
 8002944:	4283      	cmp	r3, r0
 8002946:	d1f3      	bne.n	8002930 <_free_r+0x20>
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	1841      	adds	r1, r0, r1
 800294e:	6021      	str	r1, [r4, #0]
 8002950:	e7ee      	b.n	8002930 <_free_r+0x20>
 8002952:	001a      	movs	r2, r3
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <_free_r+0x4e>
 800295a:	42a3      	cmp	r3, r4
 800295c:	d9f9      	bls.n	8002952 <_free_r+0x42>
 800295e:	6811      	ldr	r1, [r2, #0]
 8002960:	1850      	adds	r0, r2, r1
 8002962:	42a0      	cmp	r0, r4
 8002964:	d10b      	bne.n	800297e <_free_r+0x6e>
 8002966:	6820      	ldr	r0, [r4, #0]
 8002968:	1809      	adds	r1, r1, r0
 800296a:	1850      	adds	r0, r2, r1
 800296c:	6011      	str	r1, [r2, #0]
 800296e:	4283      	cmp	r3, r0
 8002970:	d1e0      	bne.n	8002934 <_free_r+0x24>
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	1841      	adds	r1, r0, r1
 8002978:	6011      	str	r1, [r2, #0]
 800297a:	6053      	str	r3, [r2, #4]
 800297c:	e7da      	b.n	8002934 <_free_r+0x24>
 800297e:	42a0      	cmp	r0, r4
 8002980:	d902      	bls.n	8002988 <_free_r+0x78>
 8002982:	230c      	movs	r3, #12
 8002984:	602b      	str	r3, [r5, #0]
 8002986:	e7d5      	b.n	8002934 <_free_r+0x24>
 8002988:	6821      	ldr	r1, [r4, #0]
 800298a:	1860      	adds	r0, r4, r1
 800298c:	4283      	cmp	r3, r0
 800298e:	d103      	bne.n	8002998 <_free_r+0x88>
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	1841      	adds	r1, r0, r1
 8002996:	6021      	str	r1, [r4, #0]
 8002998:	6063      	str	r3, [r4, #4]
 800299a:	6054      	str	r4, [r2, #4]
 800299c:	e7ca      	b.n	8002934 <_free_r+0x24>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	200000ec 	.word	0x200000ec

080029a4 <sbrk_aligned>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	4e0f      	ldr	r6, [pc, #60]	; (80029e4 <sbrk_aligned+0x40>)
 80029a8:	000d      	movs	r5, r1
 80029aa:	6831      	ldr	r1, [r6, #0]
 80029ac:	0004      	movs	r4, r0
 80029ae:	2900      	cmp	r1, #0
 80029b0:	d102      	bne.n	80029b8 <sbrk_aligned+0x14>
 80029b2:	f000 f8bf 	bl	8002b34 <_sbrk_r>
 80029b6:	6030      	str	r0, [r6, #0]
 80029b8:	0029      	movs	r1, r5
 80029ba:	0020      	movs	r0, r4
 80029bc:	f000 f8ba 	bl	8002b34 <_sbrk_r>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d00a      	beq.n	80029da <sbrk_aligned+0x36>
 80029c4:	2303      	movs	r3, #3
 80029c6:	1cc5      	adds	r5, r0, #3
 80029c8:	439d      	bics	r5, r3
 80029ca:	42a8      	cmp	r0, r5
 80029cc:	d007      	beq.n	80029de <sbrk_aligned+0x3a>
 80029ce:	1a29      	subs	r1, r5, r0
 80029d0:	0020      	movs	r0, r4
 80029d2:	f000 f8af 	bl	8002b34 <_sbrk_r>
 80029d6:	1c43      	adds	r3, r0, #1
 80029d8:	d101      	bne.n	80029de <sbrk_aligned+0x3a>
 80029da:	2501      	movs	r5, #1
 80029dc:	426d      	negs	r5, r5
 80029de:	0028      	movs	r0, r5
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	200000f0 	.word	0x200000f0

080029e8 <_malloc_r>:
 80029e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ea:	2203      	movs	r2, #3
 80029ec:	1ccb      	adds	r3, r1, #3
 80029ee:	4393      	bics	r3, r2
 80029f0:	3308      	adds	r3, #8
 80029f2:	0006      	movs	r6, r0
 80029f4:	001f      	movs	r7, r3
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d232      	bcs.n	8002a60 <_malloc_r+0x78>
 80029fa:	270c      	movs	r7, #12
 80029fc:	42b9      	cmp	r1, r7
 80029fe:	d831      	bhi.n	8002a64 <_malloc_r+0x7c>
 8002a00:	0030      	movs	r0, r6
 8002a02:	f000 f8a9 	bl	8002b58 <__malloc_lock>
 8002a06:	4d32      	ldr	r5, [pc, #200]	; (8002ad0 <_malloc_r+0xe8>)
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	001c      	movs	r4, r3
 8002a0c:	2c00      	cmp	r4, #0
 8002a0e:	d12e      	bne.n	8002a6e <_malloc_r+0x86>
 8002a10:	0039      	movs	r1, r7
 8002a12:	0030      	movs	r0, r6
 8002a14:	f7ff ffc6 	bl	80029a4 <sbrk_aligned>
 8002a18:	0004      	movs	r4, r0
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	d11e      	bne.n	8002a5c <_malloc_r+0x74>
 8002a1e:	682c      	ldr	r4, [r5, #0]
 8002a20:	0025      	movs	r5, r4
 8002a22:	2d00      	cmp	r5, #0
 8002a24:	d14a      	bne.n	8002abc <_malloc_r+0xd4>
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	0029      	movs	r1, r5
 8002a2a:	18e3      	adds	r3, r4, r3
 8002a2c:	0030      	movs	r0, r6
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	f000 f880 	bl	8002b34 <_sbrk_r>
 8002a34:	9b01      	ldr	r3, [sp, #4]
 8002a36:	4283      	cmp	r3, r0
 8002a38:	d143      	bne.n	8002ac2 <_malloc_r+0xda>
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	3703      	adds	r7, #3
 8002a3e:	1aff      	subs	r7, r7, r3
 8002a40:	2303      	movs	r3, #3
 8002a42:	439f      	bics	r7, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	2f0c      	cmp	r7, #12
 8002a48:	d200      	bcs.n	8002a4c <_malloc_r+0x64>
 8002a4a:	270c      	movs	r7, #12
 8002a4c:	0039      	movs	r1, r7
 8002a4e:	0030      	movs	r0, r6
 8002a50:	f7ff ffa8 	bl	80029a4 <sbrk_aligned>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d034      	beq.n	8002ac2 <_malloc_r+0xda>
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	19df      	adds	r7, r3, r7
 8002a5c:	6027      	str	r7, [r4, #0]
 8002a5e:	e013      	b.n	8002a88 <_malloc_r+0xa0>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	dacb      	bge.n	80029fc <_malloc_r+0x14>
 8002a64:	230c      	movs	r3, #12
 8002a66:	2500      	movs	r5, #0
 8002a68:	6033      	str	r3, [r6, #0]
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a6e:	6822      	ldr	r2, [r4, #0]
 8002a70:	1bd1      	subs	r1, r2, r7
 8002a72:	d420      	bmi.n	8002ab6 <_malloc_r+0xce>
 8002a74:	290b      	cmp	r1, #11
 8002a76:	d917      	bls.n	8002aa8 <_malloc_r+0xc0>
 8002a78:	19e2      	adds	r2, r4, r7
 8002a7a:	6027      	str	r7, [r4, #0]
 8002a7c:	42a3      	cmp	r3, r4
 8002a7e:	d111      	bne.n	8002aa4 <_malloc_r+0xbc>
 8002a80:	602a      	str	r2, [r5, #0]
 8002a82:	6863      	ldr	r3, [r4, #4]
 8002a84:	6011      	str	r1, [r2, #0]
 8002a86:	6053      	str	r3, [r2, #4]
 8002a88:	0030      	movs	r0, r6
 8002a8a:	0025      	movs	r5, r4
 8002a8c:	f000 f86c 	bl	8002b68 <__malloc_unlock>
 8002a90:	2207      	movs	r2, #7
 8002a92:	350b      	adds	r5, #11
 8002a94:	1d23      	adds	r3, r4, #4
 8002a96:	4395      	bics	r5, r2
 8002a98:	1aea      	subs	r2, r5, r3
 8002a9a:	429d      	cmp	r5, r3
 8002a9c:	d0e5      	beq.n	8002a6a <_malloc_r+0x82>
 8002a9e:	1b5b      	subs	r3, r3, r5
 8002aa0:	50a3      	str	r3, [r4, r2]
 8002aa2:	e7e2      	b.n	8002a6a <_malloc_r+0x82>
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	e7ec      	b.n	8002a82 <_malloc_r+0x9a>
 8002aa8:	6862      	ldr	r2, [r4, #4]
 8002aaa:	42a3      	cmp	r3, r4
 8002aac:	d101      	bne.n	8002ab2 <_malloc_r+0xca>
 8002aae:	602a      	str	r2, [r5, #0]
 8002ab0:	e7ea      	b.n	8002a88 <_malloc_r+0xa0>
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	e7e8      	b.n	8002a88 <_malloc_r+0xa0>
 8002ab6:	0023      	movs	r3, r4
 8002ab8:	6864      	ldr	r4, [r4, #4]
 8002aba:	e7a7      	b.n	8002a0c <_malloc_r+0x24>
 8002abc:	002c      	movs	r4, r5
 8002abe:	686d      	ldr	r5, [r5, #4]
 8002ac0:	e7af      	b.n	8002a22 <_malloc_r+0x3a>
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	0030      	movs	r0, r6
 8002ac6:	6033      	str	r3, [r6, #0]
 8002ac8:	f000 f84e 	bl	8002b68 <__malloc_unlock>
 8002acc:	e7cd      	b.n	8002a6a <_malloc_r+0x82>
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	200000ec 	.word	0x200000ec

08002ad4 <_realloc_r>:
 8002ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ad6:	0007      	movs	r7, r0
 8002ad8:	000e      	movs	r6, r1
 8002ada:	0014      	movs	r4, r2
 8002adc:	2900      	cmp	r1, #0
 8002ade:	d105      	bne.n	8002aec <_realloc_r+0x18>
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	f7ff ff81 	bl	80029e8 <_malloc_r>
 8002ae6:	0005      	movs	r5, r0
 8002ae8:	0028      	movs	r0, r5
 8002aea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d103      	bne.n	8002af8 <_realloc_r+0x24>
 8002af0:	f7ff ff0e 	bl	8002910 <_free_r>
 8002af4:	0025      	movs	r5, r4
 8002af6:	e7f7      	b.n	8002ae8 <_realloc_r+0x14>
 8002af8:	f000 f83e 	bl	8002b78 <_malloc_usable_size_r>
 8002afc:	9001      	str	r0, [sp, #4]
 8002afe:	4284      	cmp	r4, r0
 8002b00:	d803      	bhi.n	8002b0a <_realloc_r+0x36>
 8002b02:	0035      	movs	r5, r6
 8002b04:	0843      	lsrs	r3, r0, #1
 8002b06:	42a3      	cmp	r3, r4
 8002b08:	d3ee      	bcc.n	8002ae8 <_realloc_r+0x14>
 8002b0a:	0021      	movs	r1, r4
 8002b0c:	0038      	movs	r0, r7
 8002b0e:	f7ff ff6b 	bl	80029e8 <_malloc_r>
 8002b12:	1e05      	subs	r5, r0, #0
 8002b14:	d0e8      	beq.n	8002ae8 <_realloc_r+0x14>
 8002b16:	9b01      	ldr	r3, [sp, #4]
 8002b18:	0022      	movs	r2, r4
 8002b1a:	429c      	cmp	r4, r3
 8002b1c:	d900      	bls.n	8002b20 <_realloc_r+0x4c>
 8002b1e:	001a      	movs	r2, r3
 8002b20:	0031      	movs	r1, r6
 8002b22:	0028      	movs	r0, r5
 8002b24:	f7ff fed7 	bl	80028d6 <memcpy>
 8002b28:	0031      	movs	r1, r6
 8002b2a:	0038      	movs	r0, r7
 8002b2c:	f7ff fef0 	bl	8002910 <_free_r>
 8002b30:	e7da      	b.n	8002ae8 <_realloc_r+0x14>
	...

08002b34 <_sbrk_r>:
 8002b34:	2300      	movs	r3, #0
 8002b36:	b570      	push	{r4, r5, r6, lr}
 8002b38:	4d06      	ldr	r5, [pc, #24]	; (8002b54 <_sbrk_r+0x20>)
 8002b3a:	0004      	movs	r4, r0
 8002b3c:	0008      	movs	r0, r1
 8002b3e:	602b      	str	r3, [r5, #0]
 8002b40:	f7fe f836 	bl	8000bb0 <_sbrk>
 8002b44:	1c43      	adds	r3, r0, #1
 8002b46:	d103      	bne.n	8002b50 <_sbrk_r+0x1c>
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d000      	beq.n	8002b50 <_sbrk_r+0x1c>
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	200000f4 	.word	0x200000f4

08002b58 <__malloc_lock>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4802      	ldr	r0, [pc, #8]	; (8002b64 <__malloc_lock+0xc>)
 8002b5c:	f000 f814 	bl	8002b88 <__retarget_lock_acquire_recursive>
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	200000f8 	.word	0x200000f8

08002b68 <__malloc_unlock>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4802      	ldr	r0, [pc, #8]	; (8002b74 <__malloc_unlock+0xc>)
 8002b6c:	f000 f80d 	bl	8002b8a <__retarget_lock_release_recursive>
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	200000f8 	.word	0x200000f8

08002b78 <_malloc_usable_size_r>:
 8002b78:	1f0b      	subs	r3, r1, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1f18      	subs	r0, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da01      	bge.n	8002b86 <_malloc_usable_size_r+0xe>
 8002b82:	580b      	ldr	r3, [r1, r0]
 8002b84:	18c0      	adds	r0, r0, r3
 8002b86:	4770      	bx	lr

08002b88 <__retarget_lock_acquire_recursive>:
 8002b88:	4770      	bx	lr

08002b8a <__retarget_lock_release_recursive>:
 8002b8a:	4770      	bx	lr

08002b8c <_init>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr

08002b98 <_fini>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr
